# Production Secrets Management for Kubernetes
# Using External Secrets Operator for secure secret management

apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: inergize-secret-store
  namespace: inergize-production
  labels:
    environment: production
spec:
  provider:
    vault:
      server: "https://vault.inergize.com"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "inergize-production"
          secretRef:
            name: vault-auth
            key: token

---
# Database Secrets
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: database-secrets
  namespace: inergize-production
  labels:
    environment: production
    component: database
spec:
  refreshInterval: 5m
  secretStoreRef:
    name: inergize-secret-store
    kind: SecretStore
  target:
    name: database-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        postgres-password: "{{ .postgresPassword }}"
        timescale-password: "{{ .timescalePassword }}"
        redis-password: "{{ .redisPassword }}"
  data:
    - secretKey: postgresPassword
      remoteRef:
        key: database/postgres
        property: password
    - secretKey: timescalePassword
      remoteRef:
        key: database/timescale
        property: password
    - secretKey: redisPassword
      remoteRef:
        key: database/redis
        property: password

---
# Application Secrets
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: app-secrets
  namespace: inergize-production
  labels:
    environment: production
    component: application
spec:
  refreshInterval: 5m
  secretStoreRef:
    name: inergize-secret-store
    kind: SecretStore
  target:
    name: app-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        jwt-access-secret: "{{ .jwtAccessSecret }}"
        jwt-refresh-secret: "{{ .jwtRefreshSecret }}"
        encryption-key: "{{ .encryptionKey }}"
        nextauth-secret: "{{ .nextauthSecret }}"
  data:
    - secretKey: jwtAccessSecret
      remoteRef:
        key: application/jwt
        property: access-secret
    - secretKey: jwtRefreshSecret
      remoteRef:
        key: application/jwt
        property: refresh-secret
    - secretKey: encryptionKey
      remoteRef:
        key: application/encryption
        property: key
    - secretKey: nextauthSecret
      remoteRef:
        key: application/nextauth
        property: secret

---
# LinkedIn API Secrets
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: linkedin-secrets
  namespace: inergize-production
  labels:
    environment: production
    component: linkedin
    compliance: critical
spec:
  refreshInterval: 1m  # More frequent refresh for critical compliance
  secretStoreRef:
    name: inergize-secret-store
    kind: SecretStore
  target:
    name: linkedin-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      metadata:
        annotations:
          compliance.inergize.com/classification: "restricted"
          compliance.inergize.com/retention: "90d"
      data:
        client-id: "{{ .clientId }}"
        client-secret: "{{ .clientSecret }}"
  data:
    - secretKey: clientId
      remoteRef:
        key: integrations/linkedin
        property: client-id
    - secretKey: clientSecret
      remoteRef:
        key: integrations/linkedin
        property: client-secret

---
# AI Service Secrets
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: ai-secrets
  namespace: inergize-production
  labels:
    environment: production
    component: ai
spec:
  refreshInterval: 5m
  secretStoreRef:
    name: inergize-secret-store
    kind: SecretStore
  target:
    name: ai-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        openai-api-key: "{{ .openaiKey }}"
        anthropic-api-key: "{{ .anthropicKey }}"
  data:
    - secretKey: openaiKey
      remoteRef:
        key: ai/openai
        property: api-key
    - secretKey: anthropicKey
      remoteRef:
        key: ai/anthropic
        property: api-key

---
# TLS Certificates
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: tls-certificates
  namespace: inergize-production
  labels:
    environment: production
    component: security
spec:
  refreshInterval: 24h
  secretStoreRef:
    name: inergize-secret-store
    kind: SecretStore
  target:
    name: tls-certificates
    creationPolicy: Owner
    template:
      type: kubernetes.io/tls
      data:
        tls.crt: "{{ .cert }}"
        tls.key: "{{ .key }}"
        ca.crt: "{{ .ca }}"
  data:
    - secretKey: cert
      remoteRef:
        key: certificates/production
        property: certificate
    - secretKey: key
      remoteRef:
        key: certificates/production  
        property: private-key
    - secretKey: ca
      remoteRef:
        key: certificates/production
        property: ca-certificate

---
# Monitoring Secrets
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: monitoring-secrets
  namespace: inergize-production
  labels:
    environment: production
    component: monitoring
spec:
  refreshInterval: 5m
  secretStoreRef:
    name: inergize-secret-store
    kind: SecretStore
  target:
    name: monitoring-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        grafana-admin-password: "{{ .grafanaPassword }}"
        grafana-secret-key: "{{ .grafanaSecret }}"
        alertmanager-webhook: "{{ .alertmanagerWebhook }}"
  data:
    - secretKey: grafanaPassword
      remoteRef:
        key: monitoring/grafana
        property: admin-password
    - secretKey: grafanaSecret
      remoteRef:
        key: monitoring/grafana
        property: secret-key
    - secretKey: alertmanagerWebhook
      remoteRef:
        key: monitoring/alertmanager
        property: webhook-url