# InErgize Phase 4 - Production Kubernetes Cluster Configuration
# Enterprise-grade cluster with high availability, security, and observability

---
# Production Namespace with Enhanced Security
apiVersion: v1
kind: Namespace
metadata:
  name: inergize-production
  labels:
    name: inergize-production
    environment: production
    security.inergize.com/tier: "production"
    compliance.inergize.com/framework: "soc2"
    networking.inergize.com/policy: "zero-trust"
  annotations:
    scheduler.alpha.kubernetes.io/node-selector: "environment=production"
    security.inergize.com/scan-schedule: "daily"
    compliance.inergize.com/retention-days: "2555"

---
# Istio System Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: istio-system
  labels:
    name: istio-system
    istio-injection: disabled
    security.inergize.com/tier: "infrastructure"

---
# Monitoring Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
  labels:
    name: monitoring
    security.inergize.com/tier: "infrastructure"
    prometheus.io/scrape: "true"

---
# PostgreSQL StatefulSet - Primary Database
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
  namespace: inergize-production
  labels:
    app: postgresql
    component: database
    tier: data
    version: "15.4"
spec:
  serviceName: postgresql
  replicas: 3  # Primary + 2 read replicas
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
        component: database
        tier: data
        version: "15.4"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      serviceAccountName: postgresql-sa
      containers:
      - name: postgresql
        image: postgres:15.4-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          name: postgresql
        env:
        - name: POSTGRES_DB
          value: "inergize_production"
        - name: POSTGRES_USER
          value: "inergize_user"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: postgres-password
        - name: POSTGRES_REPLICATION_USER
          value: "replicator"
        - name: POSTGRES_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: postgres-replication-password
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        - name: POSTGRES_INITDB_ARGS
          value: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
        volumeMounts:
        - name: postgresql-data
          mountPath: /var/lib/postgresql/data
        - name: postgresql-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
          readOnly: true
        - name: postgresql-hba
          mountPath: /etc/postgresql/pg_hba.conf
          subPath: pg_hba.conf
          readOnly: true
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U inergize_user -d inergize_production -h 127.0.0.1 -p 5432
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U inergize_user -d inergize_production -h 127.0.0.1 -p 5432
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 1
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # PostgreSQL needs to write data
          runAsNonRoot: true
          runAsUser: 999
          capabilities:
            drop:
            - ALL
      
      # PostgreSQL Exporter Sidecar
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:v0.13.2
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9187
          name: metrics
        env:
        - name: DATA_SOURCE_NAME
          value: "postgresql://inergize_user:$(POSTGRES_PASSWORD)@localhost:5432/inergize_production?sslmode=require"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: postgres-password
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
      
      volumes:
      - name: postgresql-config
        configMap:
          name: postgresql-config
      - name: postgresql-hba
        configMap:
          name: postgresql-hba-config
  
  volumeClaimTemplates:
  - metadata:
      name: postgresql-data
      labels:
        app: postgresql
        component: database
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 100Gi

---
# TimescaleDB StatefulSet - Analytics Database
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: timescaledb
  namespace: inergize-production
  labels:
    app: timescaledb
    component: analytics-database
    tier: data
    version: "2.11.2"
spec:
  serviceName: timescaledb
  replicas: 2  # Primary + read replica
  selector:
    matchLabels:
      app: timescaledb
  template:
    metadata:
      labels:
        app: timescaledb
        component: analytics-database
        tier: data
        version: "2.11.2"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      serviceAccountName: timescaledb-sa
      containers:
      - name: timescaledb
        image: timescale/timescaledb:2.11.2-pg15
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          name: timescaledb
        env:
        - name: POSTGRES_DB
          value: "inergize_analytics"
        - name: POSTGRES_USER
          value: "timescale_user"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: timescale-password
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        - name: TIMESCALEDB_TELEMETRY
          value: "off"
        volumeMounts:
        - name: timescaledb-data
          mountPath: /var/lib/postgresql/data
        - name: timescaledb-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
          readOnly: true
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U timescale_user -d inergize_analytics -h 127.0.0.1 -p 5432
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U timescale_user -d inergize_analytics -h 127.0.0.1 -p 5432
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 1
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 999
          capabilities:
            drop:
            - ALL
      
      volumes:
      - name: timescaledb-config
        configMap:
          name: timescaledb-config
  
  volumeClaimTemplates:
  - metadata:
      name: timescaledb-data
      labels:
        app: timescaledb
        component: analytics-database
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 200Gi

---
# Redis Cluster - Cache & Queue System
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: inergize-production
  labels:
    app: redis
    component: cache
    tier: data
    version: "7.2.1"
spec:
  serviceName: redis
  replicas: 6  # 3 masters + 3 replicas for HA
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        component: cache
        tier: data
        version: "7.2.1"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      serviceAccountName: redis-sa
      containers:
      - name: redis
        image: redis:7.2.1-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 6380  # Custom port for security
          name: redis
        - containerPort: 16380  # Cluster bus port
          name: cluster-bus
        command:
        - redis-server
        args:
        - /etc/redis/redis.conf
        - --port
        - "6380"
        - --cluster-config-file
        - /data/nodes.conf
        - --cluster-node-timeout
        - "5000"
        - --appendonly
        - "yes"
        - --appendfsync
        - "everysec"
        - --requirepass
        - "$(REDIS_PASSWORD)"
        - --masterauth
        - "$(REDIS_PASSWORD)"
        - --tls-port
        - "6380"
        - --tls-cert-file
        - /etc/ssl/redis/redis.crt
        - --tls-key-file
        - /etc/ssl/redis/redis.key
        - --tls-ca-cert-file
        - /etc/ssl/redis/ca.crt
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: redis-password
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis/redis.conf
          subPath: redis.conf
          readOnly: true
        - name: redis-tls
          mountPath: /etc/ssl/redis
          readOnly: true
        livenessProbe:
          exec:
            command:
            - redis-cli
            - --tls
            - --cert
            - /etc/ssl/redis/redis.crt
            - --key
            - /etc/ssl/redis/redis.key
            - --cacert
            - /etc/ssl/redis/ca.crt
            - -h
            - "127.0.0.1"
            - -p
            - "6380"
            - -a
            - "$(REDIS_PASSWORD)"
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - --tls
            - --cert
            - /etc/ssl/redis/redis.crt
            - --key
            - /etc/ssl/redis/redis.key
            - --cacert
            - /etc/ssl/redis/ca.crt
            - -h
            - "127.0.0.1"
            - -p
            - "6380"
            - -a
            - "$(REDIS_PASSWORD)"
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 1
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 999
          capabilities:
            drop:
            - ALL
      
      # Redis Exporter Sidecar
      - name: redis-exporter
        image: oliver006/redis_exporter:v1.52.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9121
          name: metrics
        env:
        - name: REDIS_ADDR
          value: "rediss://127.0.0.1:6380"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: redis-password
        - name: REDIS_EXPORTER_TLS_CLIENT_KEY_FILE
          value: "/etc/ssl/redis/redis.key"
        - name: REDIS_EXPORTER_TLS_CLIENT_CERT_FILE
          value: "/etc/ssl/redis/redis.crt"
        - name: REDIS_EXPORTER_TLS_CA_CERT_FILE
          value: "/etc/ssl/redis/ca.crt"
        volumeMounts:
        - name: redis-tls
          mountPath: /etc/ssl/redis
          readOnly: true
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
      
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
      - name: redis-tls
        secret:
          secretName: redis-tls-certificates
  
  volumeClaimTemplates:
  - metadata:
      name: redis-data
      labels:
        app: redis
        component: cache
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 50Gi

---
# Service Definitions
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: inergize-production
  labels:
    app: postgresql
    component: database
spec:
  selector:
    app: postgresql
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgresql
  - port: 9187
    targetPort: 9187
    protocol: TCP
    name: metrics
  type: ClusterIP
  clusterIP: None  # Headless service for StatefulSet

---
apiVersion: v1
kind: Service
metadata:
  name: timescaledb
  namespace: inergize-production
  labels:
    app: timescaledb
    component: analytics-database
spec:
  selector:
    app: timescaledb
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: timescaledb
  - port: 9187
    targetPort: 9187
    protocol: TCP
    name: metrics
  type: ClusterIP
  clusterIP: None

---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: inergize-production
  labels:
    app: redis
    component: cache
spec:
  selector:
    app: redis
  ports:
  - port: 6380
    targetPort: 6380
    protocol: TCP
    name: redis
  - port: 9121
    targetPort: 9121
    protocol: TCP
    name: metrics
  type: ClusterIP
  clusterIP: None

---
# Application Services
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  namespace: inergize-production
  labels:
    app: auth-service
    component: authentication
spec:
  selector:
    app: auth-service
  ports:
  - port: 3001
    targetPort: 3001
    protocol: TCP
    name: http
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: inergize-production
  labels:
    app: user-service
    component: user-management
spec:
  selector:
    app: user-service
  ports:
  - port: 3002
    targetPort: 3002
    protocol: TCP
    name: http
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: linkedin-service
  namespace: inergize-production
  labels:
    app: linkedin-service
    component: linkedin-integration
    compliance.inergize.com/critical: "true"
spec:
  selector:
    app: linkedin-service
  ports:
  - port: 3003
    targetPort: 3003
    protocol: TCP
    name: http
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: analytics-service
  namespace: inergize-production
  labels:
    app: analytics-service
    component: analytics
spec:
  selector:
    app: analytics-service
  ports:
  - port: 3004
    targetPort: 3004
    protocol: TCP
    name: http
  - port: 3007
    targetPort: 3007
    protocol: TCP
    name: websocket
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: ai-service
  namespace: inergize-production
  labels:
    app: ai-service
    component: artificial-intelligence
spec:
  selector:
    app: ai-service
  ports:
  - port: 3005
    targetPort: 3005
    protocol: TCP
    name: http
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: web-frontend
  namespace: inergize-production
  labels:
    app: web-frontend
    component: frontend
spec:
  selector:
    app: web-frontend
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  type: ClusterIP

---
# Service Accounts
apiVersion: v1
kind: ServiceAccount
metadata:
  name: postgresql-sa
  namespace: inergize-production
  labels:
    app: postgresql
    component: database
automountServiceAccountToken: false

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: timescaledb-sa
  namespace: inergize-production
  labels:
    app: timescaledb
    component: analytics-database
automountServiceAccountToken: false

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: redis-sa
  namespace: inergize-production
  labels:
    app: redis
    component: cache
automountServiceAccountToken: false

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: compliance-scanner
  namespace: inergize-production
  labels:
    compliance.inergize.com/service: "scanner"
automountServiceAccountToken: true

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: web-frontend-sa
  namespace: inergize-production
  labels:
    app: web-frontend
    component: frontend
automountServiceAccountToken: false