# Production Database Deployments for Kubernetes
# PostgreSQL, TimescaleDB, and Redis with high availability

---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
  namespace: inergize-production
  labels:
    app: postgresql
    component: database
    environment: production
spec:
  serviceName: postgresql-headless
  replicas: 3  # Primary + 2 read replicas
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
        component: database
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
    spec:
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsNonRoot: true
      containers:
        - name: postgresql
          image: postgres:16.1-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5432
              name: postgresql
            - containerPort: 9187
              name: metrics
          env:
            - name: POSTGRES_DB
              value: "inergize_production"
            - name: POSTGRES_USER
              value: "inergize_user"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: database-secrets
                  key: postgres-password
            - name: POSTGRES_INITDB_ARGS
              value: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
          volumeMounts:
            - name: postgresql-data
              mountPath: /var/lib/postgresql/data
            - name: postgresql-config
              mountPath: /etc/postgresql
            - name: tls-certs
              mountPath: /etc/ssl/certs
              readOnly: true
          resources:
            requests:
              memory: "2Gi"
              cpu: "1000m"
            limits:
              memory: "4Gi"
              cpu: "2000m"
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 1
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 999
            capabilities:
              drop:
                - ALL
        
        - name: postgres-exporter
          image: prometheuscommunity/postgres-exporter:v0.15.0
          ports:
            - containerPort: 9187
              name: metrics
          env:
            - name: DATA_SOURCE_NAME
              value: "postgresql://inergize_user:$(POSTGRES_PASSWORD)@localhost:5432/inergize_production?sslmode=require"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: database-secrets
                  key: postgres-password
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
            capabilities:
              drop:
                - ALL
                
      volumes:
        - name: postgresql-config
          configMap:
            name: postgresql-config
        - name: tls-certs
          secret:
            secretName: tls-certificates
  volumeClaimTemplates:
    - metadata:
        name: postgresql-data
        labels:
          app: postgresql
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: fast-ssd
        resources:
          requests:
            storage: 100Gi

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: inergize-production
  labels:
    app: postgresql
    component: database
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432
      name: postgresql
    - port: 9187
      targetPort: 9187
      name: metrics
  selector:
    app: postgresql

---
# PostgreSQL Headless Service for StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: postgresql-headless
  namespace: inergize-production
  labels:
    app: postgresql
    component: database
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 5432
      targetPort: 5432
      name: postgresql
  selector:
    app: postgresql

---
# TimescaleDB StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: timescaledb
  namespace: inergize-production
  labels:
    app: timescaledb
    component: analytics-database
    environment: production
spec:
  serviceName: timescaledb-headless
  replicas: 2  # Primary + 1 read replica
  selector:
    matchLabels:
      app: timescaledb
  template:
    metadata:
      labels:
        app: timescaledb
        component: analytics-database
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
    spec:
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsNonRoot: true
      containers:
        - name: timescaledb
          image: timescale/timescaledb:2.13.0-pg16
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5432
              name: timescaledb
          env:
            - name: POSTGRES_DB
              value: "inergize_analytics"
            - name: POSTGRES_USER
              value: "timescale_user"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: database-secrets
                  key: timescale-password
            - name: POSTGRES_INITDB_ARGS
              value: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
            - name: TIMESCALEDB_TELEMETRY
              value: "off"
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
          volumeMounts:
            - name: timescaledb-data
              mountPath: /var/lib/postgresql/data
            - name: timescaledb-config
              mountPath: /etc/postgresql
            - name: tls-certs
              mountPath: /etc/ssl/certs
              readOnly: true
          resources:
            requests:
              memory: "4Gi"
              cpu: "2000m"
            limits:
              memory: "8Gi"
              cpu: "4000m"
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 1
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 999
            capabilities:
              drop:
                - ALL
                
      volumes:
        - name: timescaledb-config
          configMap:
            name: timescaledb-config
        - name: tls-certs
          secret:
            secretName: tls-certificates
  volumeClaimTemplates:
    - metadata:
        name: timescaledb-data
        labels:
          app: timescaledb
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: fast-ssd
        resources:
          requests:
            storage: 200Gi

---
# TimescaleDB Service
apiVersion: v1
kind: Service
metadata:
  name: timescaledb
  namespace: inergize-production
  labels:
    app: timescaledb
    component: analytics-database
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432
      name: timescaledb
  selector:
    app: timescaledb

---
# Redis Cluster Configuration
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: inergize-production
  labels:
    app: redis
    component: cache
    environment: production
spec:
  serviceName: redis-headless
  replicas: 6  # 3 masters + 3 slaves for Redis Cluster
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        component: cache
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
    spec:
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsNonRoot: true
      containers:
        - name: redis
          image: redis:7.2.3-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 6379
              name: redis
            - containerPort: 6380
              name: redis-tls
            - containerPort: 16379  
              name: cluster-bus
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: database-secrets
                  key: redis-password
          command:
            - redis-server
          args:
            - /etc/redis/redis.conf
            - --requirepass $(REDIS_PASSWORD)
            - --appendonly yes
            - --appendfsync everysec
            - --maxmemory 2gb
            - --maxmemory-policy allkeys-lru
            - --timeout 300
            - --tcp-keepalive 60
            - --maxclients 2000
            - --cluster-enabled yes
            - --cluster-config-file nodes.conf
            - --cluster-node-timeout 5000
          volumeMounts:
            - name: redis-data
              mountPath: /data
            - name: redis-config
              mountPath: /etc/redis
            - name: tls-certs
              mountPath: /etc/ssl/certs
              readOnly: true
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1000m"
          livenessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - redis-cli
                - --no-auth-warning
                - -a
                - $(REDIS_PASSWORD)
                - ping
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 1
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 999
            capabilities:
              drop:
                - ALL
                
        - name: redis-exporter
          image: oliver006/redis_exporter:v1.55.0
          ports:
            - containerPort: 9121
              name: metrics
          env:
            - name: REDIS_ADDR
              value: "redis://localhost:6379"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: database-secrets
                  key: redis-password
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
            capabilities:
              drop:
                - ALL
                
      volumes:
        - name: redis-config
          configMap:
            name: redis-config
        - name: tls-certs
          secret:
            secretName: tls-certificates
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app: redis
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: fast-ssd
        resources:
          requests:
            storage: 20Gi

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: inergize-production
  labels:
    app: redis
    component: cache
spec:
  type: ClusterIP
  ports:
    - port: 6379
      targetPort: 6379
      name: redis
    - port: 6380
      targetPort: 6380
      name: redis-tls
    - port: 9121
      targetPort: 9121
      name: metrics
  selector:
    app: redis

---
# Redis Headless Service
apiVersion: v1
kind: Service  
metadata:
  name: redis-headless
  namespace: inergize-production
  labels:
    app: redis
    component: cache
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 6379
      targetPort: 6379
      name: redis
    - port: 16379
      targetPort: 16379
      name: cluster-bus
  selector:
    app: redis