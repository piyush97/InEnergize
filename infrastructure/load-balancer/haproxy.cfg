# HAProxy Load Balancer Configuration for InErgize Enterprise Backend
# Optimized for 10,000+ concurrent users with high availability

global
    maxconn 50000
    log stdout local0
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

    # SSL/TLS Configuration
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets

    # Performance Tuning
    tune.ssl.default-dh-param 2048
    tune.bufsize 32768
    tune.maxrewrite 8192
    tune.http.maxhdr 1000

defaults
    mode http
    log global
    timeout connect 10s
    timeout client 60s
    timeout server 60s
    timeout http-request 15s
    timeout http-keep-alive 2s
    timeout check 10s
    retries 3
    option httplog
    option dontlognull
    option log-health-checks
    option redispatch
    option splice-auto
    option splice-request
    option splice-response
    maxconn 20000

    # Error pages
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Statistics Dashboard
frontend stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 5s
    stats show-legends
    stats show-node
    stats admin if TRUE
    stats auth admin:${HAPROXY_STATS_PASSWORD}

# Frontend for HTTP Traffic
frontend http_frontend
    bind *:80
    mode http
    
    # Security Headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    
    # Rate Limiting
    stick-table type ipv6 size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 100 }
    
    # Redirect to HTTPS
    redirect scheme https code 301 if !{ ssl_fc }

# Frontend for HTTPS Traffic
frontend https_frontend
    bind *:443 ssl crt /etc/ssl/certs/inergize.pem alpn h2,http/1.1
    mode http
    
    # Security Headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    
    # Rate Limiting
    stick-table type ipv6 size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 200 }
    
    # Request ID for tracing
    http-request set-header X-Request-ID %[uuid()]
    
    # Health Check
    acl is_health_check path_beg /health
    use_backend health_check if is_health_check
    
    # API Routes
    acl is_api_auth path_beg /api/auth
    acl is_api_users path_beg /api/users
    acl is_api_linkedin path_beg /api/linkedin
    acl is_api_analytics path_beg /api/analytics
    acl is_api_ai path_beg /api/ai
    acl is_websocket path_beg /api/ws
    
    # Route to appropriate backend
    use_backend kong_gateway if is_api_auth
    use_backend kong_gateway if is_api_users
    use_backend kong_gateway if is_api_linkedin
    use_backend kong_gateway if is_api_analytics
    use_backend kong_gateway if is_api_ai
    use_backend websocket_backend if is_websocket
    
    # Default to Kong Gateway
    default_backend kong_gateway

# Health Check Backend
backend health_check
    mode http
    option httpchk GET /health
    http-check expect status 200
    server health_local 127.0.0.1:8080 check

# Kong API Gateway Backend
backend kong_gateway
    mode http
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    # Connection pooling
    option http-server-close
    option forwardfor
    option httplog
    
    # Kong instances
    server kong1 kong:8000 check maxconn 5000 weight 100
    server kong2 kong:8000 check maxconn 5000 weight 100 backup
    
    # Stick table for session persistence
    stick-table type string len 32 size 30k expire 30m
    stick on cookie(JSESSIONID)

# WebSocket Backend with Session Affinity
backend websocket_backend
    mode http
    balance source
    option httpchk GET /health
    http-check expect status 200
    
    # WebSocket specific settings
    timeout server 300s
    timeout connect 5s
    option http-server-close
    option forwardfor
    
    # WebSocket servers
    server ws1 websocket-service-1:3007 check maxconn 2500 weight 100
    server ws2 websocket-service-2:3007 check maxconn 2500 weight 100
    
    # Stick table for WebSocket connection affinity
    stick-table type ip size 200k expire 30m
    stick on src

# Auth Service Direct Backend (for emergency bypass)
backend auth_direct
    mode http
    balance leastconn
    option httpchk GET /health
    http-check expect status 200
    
    server auth1 auth-service-1:3001 check maxconn 1000 weight 100
    server auth2 auth-service-2:3001 check maxconn 1000 weight 100

# LinkedIn Service Direct Backend (for compliance monitoring)
backend linkedin_direct
    mode http
    balance leastconn
    option httpchk GET /health
    http-check expect status 200
    
    # Ultra-conservative connection limits for LinkedIn compliance
    server linkedin1 linkedin-service-1:3003 check maxconn 500 weight 100
    server linkedin2 linkedin-service-2:3003 check maxconn 500 weight 100
    
    # Rate limiting for LinkedIn API compliance
    stick-table type ip size 100k expire 1h store http_req_rate(1h)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 50 }

# Analytics Service Direct Backend (for real-time data)
backend analytics_direct
    mode http
    balance first
    option httpchk GET /health
    http-check expect status 200
    
    server analytics1 analytics-service-1:3004 check maxconn 2000 weight 100
    server analytics2 analytics-service-2:3004 check maxconn 2000 weight 100
    
    # Stick table for analytics session consistency
    stick-table type string len 32 size 50k expire 1h
    stick on hdr(X-User-ID)

# Cache Control Rules
http-response set-header Cache-Control "public, max-age=300" if { path_beg /api/analytics/dashboard }
http-response set-header Cache-Control "public, max-age=3600" if { path_beg /api/users/profile }
http-response set-header Cache-Control "no-cache, no-store, must-revalidate" if { path_beg /api/auth }
http-response set-header Cache-Control "no-cache, no-store, must-revalidate" if { path_beg /api/linkedin }

# Compression
compression algo gzip
compression type text/plain text/html text/css text/javascript application/javascript application/json application/xml

# Connection limits per IP
frontend connection_limits
    bind *:8080
    stick-table type ip size 100k expire 10s store conn_cur
    http-request track-sc1 src
    http-request reject if { sc_conn_cur(1) gt 20 }

# Monitoring and Alerting
backend monitoring
    mode http
    server prometheus prometheus:9090 check
    server grafana grafana:3000 check