# Logstash configuration for InErgize Platform
# Processes and enriches logs before sending to Elasticsearch

input {
  # Beats input (Filebeat)
  beats {
    port => 5044
  }
  
  # Syslog input
  syslog {
    port => 5514
    facility_labels => ["kernel", "user", "mail", "daemon", "auth", "syslog", "lpr", "news", "uucp", "cron", "authpriv", "ftp", "local0", "local1", "local2", "local3", "local4", "local5", "local6", "local7"]
  }
  
  # HTTP input for application logs
  http {
    port => 8080
    codec => json
  }
}

filter {
  # Parse timestamp
  if [@timestamp] {
    date {
      match => [ "@timestamp", "ISO8601" ]
    }
  }
  
  # Parse JSON logs
  if [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
      target => "parsed"
    }
    
    if [parsed] {
      mutate {
        rename => { "[parsed][level]" => "level" }
        rename => { "[parsed][service]" => "service" }
        rename => { "[parsed][trace_id]" => "trace_id" }
        rename => { "[parsed][span_id]" => "span_id" }
        rename => { "[parsed][user_id]" => "user_id" }
        rename => { "[parsed][ip_address]" => "ip_address" }
        rename => { "[parsed][response_time]" => "response_time" }
        rename => { "[parsed][status_code]" => "status_code" }
        rename => { "[parsed][method]" => "http_method" }
        rename => { "[parsed][path]" => "http_path" }
        rename => { "[parsed][error]" => "error" }
      }
    }
  }
  
  # Extract service name from container labels
  if [container][name] {
    mutate {
      add_field => { "service" => "%{[container][name]}" }
    }
  }
  
  # Enrich authentication logs
  if [service] == "auth-service" {
    if [message] =~ /login/ {
      mutate {
        add_tag => ["authentication", "login"]
      }
      
      # Extract login attempt details
      grok {
        match => { "message" => "(?i)login %{WORD:login_result} for user %{USERNAME:username}( from %{IP:client_ip})?" }
      }
    }
    
    if [message] =~ /failed/ {
      mutate {
        add_tag => ["authentication", "failed"]
        add_field => { "alert_level" => "warning" }
      }
    }
  }
  
  # Enrich API logs
  if [http_method] and [http_path] {
    mutate {
      add_tag => ["api_request"]
      add_field => { "request_url" => "%{http_method} %{http_path}" }
    }
    
    # Categorize API endpoints
    if [http_path] =~ /^\/api\/auth/ {
      mutate { add_tag => ["auth_endpoint"] }
    }
    else if [http_path] =~ /^\/api\/users/ {
      mutate { add_tag => ["user_endpoint"] }
    }
    else if [http_path] =~ /^\/api\/linkedin/ {
      mutate { add_tag => ["linkedin_endpoint"] }
    }
    else if [http_path] =~ /^\/api\/content/ {
      mutate { add_tag => ["content_endpoint"] }
    }
    else if [http_path] =~ /^\/api\/automation/ {
      mutate { add_tag => ["automation_endpoint"] }
    }
  }
  
  # Enrich error logs
  if [level] == "error" {
    mutate {
      add_tag => ["error"]
      add_field => { "alert_level" => "error" }
    }
    
    # Extract stack trace information
    if [error][stack] {
      grok {
        match => { "[error][stack]" => "at %{DATA:error_function} \(%{DATA:error_file}:%{NUMBER:error_line}:%{NUMBER:error_column}\)" }
      }
    }
  }
  
  # Enrich performance logs
  if [response_time] {
    mutate {
      convert => { "response_time" => "float" }
    }
    
    if [response_time] > 1000 {
      mutate {
        add_tag => ["slow_request"]
        add_field => { "alert_level" => "warning" }
      }
    }
    
    if [response_time] > 5000 {
      mutate {
        add_tag => ["very_slow_request"]
        add_field => { "alert_level" => "error" }
      }
    }
  }
  
  # Enrich LinkedIn API logs
  if [service] == "linkedin-service" {
    mutate {
      add_tag => ["linkedin_api"]
    }
    
    # Track rate limiting
    if [message] =~ /rate.limit/ {
      mutate {
        add_tag => ["rate_limit"]
        add_field => { "alert_level" => "warning" }
      }
      
      grok {
        match => { "message" => "Rate limit: %{NUMBER:rate_limit_remaining} remaining" }
      }
      
      if [rate_limit_remaining] {
        mutate {
          convert => { "rate_limit_remaining" => "integer" }
        }
        
        if [rate_limit_remaining] < 100 {
          mutate {
            add_tag => ["rate_limit_critical"]
            add_field => { "alert_level" => "critical" }
          }
        }
      }
    }
  }
  
  # Enrich automation logs
  if [service] == "automation-service" {
    mutate {
      add_tag => ["automation"]
    }
    
    if [message] =~ /automation.failed/ {
      mutate {
        add_tag => ["automation_failure"]
        add_field => { "alert_level" => "error" }
      }
    }
    
    if [message] =~ /connection.request/ {
      mutate {
        add_tag => ["connection_request"]
      }
      
      grok {
        match => { "message" => "Connection request to %{USERNAME:target_user}( from %{USERNAME:source_user})? %{WORD:request_status}" }
      }
    }
  }
  
  # Security enrichment
  if [client_ip] or [ip_address] {
    # GeoIP lookup
    geoip {
      source => "client_ip"
      target => "geoip"
      add_tag => ["geoip"]
    }
    
    geoip {
      source => "ip_address"
      target => "geoip"
      add_tag => ["geoip"]
    }
    
    # Check for suspicious IPs (basic example)
    if [client_ip] =~ /^(10\.|192\.168\.|172\.(1[6-9]|2[0-9]|3[01])\.)/
    {
      mutate {
        add_tag => ["internal_ip"]
      }
    } else {
      mutate {
        add_tag => ["external_ip"]
      }
    }
  }
  
  # Business metrics enrichment
  if [service] == "analytics-service" {
    mutate {
      add_tag => ["business_metrics"]
    }
    
    if [message] =~ /user.signup/ {
      mutate {
        add_tag => ["user_signup"]
      }
      
      grok {
        match => { "message" => "User signup: %{USERNAME:new_user} plan:%{WORD:subscription_plan}" }
      }
    }
    
    if [message] =~ /payment/ {
      mutate {
        add_tag => ["payment"]
      }
      
      if [message] =~ /payment.success/ {
        mutate {
          add_tag => ["payment_success"]
        }
      }
      
      if [message] =~ /payment.failed/ {
        mutate {
          add_tag => ["payment_failure"]
          add_field => { "alert_level" => "critical" }
        }
      }
    }
  }
  
  # Clean up parsed data
  if [parsed] {
    mutate {
      remove_field => ["parsed"]
    }
  }
  
  # Add environment information
  mutate {
    add_field => { "environment" => "${ENVIRONMENT:development}" }
    add_field => { "cluster" => "inergize-cluster" }
    add_field => { "processed_at" => "%{@timestamp}" }
  }
  
  # Remove sensitive data
  mutate {
    remove_field => ["password", "token", "secret", "key", "authorization"]
  }
}

output {
  # Output to Elasticsearch
  elasticsearch {
    hosts => ["${ELASTICSEARCH_HOSTS:elasticsearch:9200}"]
    user => "${ELASTICSEARCH_USERNAME:}"
    password => "${ELASTICSEARCH_PASSWORD:}"
    
    # Index strategy
    index => "inergize-%{environment}-%{+YYYY.MM.dd}"
    
    # Use service-specific indices for high-volume services
    if [service] == "analytics-service" {
      index => "inergize-analytics-%{environment}-%{+YYYY.MM.dd}"
    }
    
    if "api_request" in [tags] {
      index => "inergize-api-%{environment}-%{+YYYY.MM.dd}"
    }
    
    if "error" in [tags] {
      index => "inergize-errors-%{environment}-%{+YYYY.MM.dd}"
    }
    
    if "linkedin_api" in [tags] {
      index => "inergize-linkedin-%{environment}-%{+YYYY.MM.dd}"
    }
    
    # Template configuration
    template_name => "inergize"
    template_pattern => "inergize-*"
    template_overwrite => true
    
    # ILM policy
    ilm_enabled => true
    ilm_rollover_alias => "inergize-logs"
    ilm_pattern => "{now/d}-000001"
    ilm_policy => "inergize-policy"
  }
  
  # Output alerts to separate index
  if [alert_level] {
    elasticsearch {
      hosts => ["${ELASTICSEARCH_HOSTS:elasticsearch:9200}"]
      user => "${ELASTICSEARCH_USERNAME:}"
      password => "${ELASTICSEARCH_PASSWORD:}"
      index => "inergize-alerts-%{environment}-%{+YYYY.MM.dd}"
    }
  }
  
  # Debug output (only in development)
  if "${ENVIRONMENT:development}" == "development" {
    stdout {
      codec => rubydebug {
        metadata => true
      }
    }
  }
  
  # Dead letter queue for failed events
  if "_grokparsefailure" in [tags] or "_jsonparsefailure" in [tags] {
    elasticsearch {
      hosts => ["${ELASTICSEARCH_HOSTS:elasticsearch:9200}"]
      user => "${ELASTICSEARCH_USERNAME:}"
      password => "${ELASTICSEARCH_PASSWORD:}"
      index => "inergize-failed-%{environment}-%{+YYYY.MM.dd}"
    }
  }
}