# InErgize Phase 4 - Istio Service Mesh Configuration
# mTLS, traffic management, security policies, and observability

---
# Istio Gateway - Main Ingress
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: inergize-gateway
  namespace: inergize-production
  labels:
    security.inergize.com/ingress: "secure"
    compliance.inergize.com/tls: "required"
spec:
  selector:
    istio: ingressgateway
  servers:
  # HTTPS Traffic
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: SIMPLE
      credentialName: inergize-tls-certificate
    hosts:
    - "app.inergize.com"
    - "api.inergize.com"
    - "ws.inergize.com"
  # HTTP Redirect to HTTPS
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "app.inergize.com"
    - "api.inergize.com"
    - "ws.inergize.com"
    tls:
      httpsRedirect: true

---
# Virtual Service - Traffic Routing
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: inergize-routing
  namespace: inergize-production
  labels:
    security.inergize.com/routing: "authenticated"
spec:
  hosts:
  - "app.inergize.com"
  - "api.inergize.com"
  - "ws.inergize.com"
  gateways:
  - inergize-gateway
  http:
  # Auth Service Routes
  - match:
    - uri:
        prefix: "/api/v1/auth"
    - headers:
        x-api-version:
          exact: v1
    route:
    - destination:
        host: auth-service.inergize-production.svc.cluster.local
        port:
          number: 3001
    timeout: 30s
    retries:
      attempts: 3
      perTryTimeout: 10s
    headers:
      request:
        add:
          x-forwarded-proto: "https"
          x-security-context: "zero-trust"
  
  # User Service Routes
  - match:
    - uri:
        prefix: "/api/v1/users"
    route:
    - destination:
        host: user-service.inergize-production.svc.cluster.local
        port:
          number: 3002
    timeout: 30s
    headers:
      request:
        add:
          x-forwarded-proto: "https"
          x-security-context: "zero-trust"
  
  # LinkedIn Service Routes (High Security)
  - match:
    - uri:
        prefix: "/api/v1/linkedin"
    route:
    - destination:
        host: linkedin-service.inergize-production.svc.cluster.local
        port:
          number: 3003
    timeout: 60s  # Longer timeout for LinkedIn compliance delays
    retries:
      attempts: 2  # Limited retries for compliance
      perTryTimeout: 30s
    headers:
      request:
        add:
          x-forwarded-proto: "https"
          x-security-context: "zero-trust"
          x-compliance-mode: "ultra-conservative"
  
  # Analytics Service Routes
  - match:
    - uri:
        prefix: "/api/v1/analytics"
    route:
    - destination:
        host: analytics-service.inergize-production.svc.cluster.local
        port:
          number: 3004
    timeout: 45s
    headers:
      request:
        add:
          x-forwarded-proto: "https"
          x-security-context: "zero-trust"
  
  # AI Service Routes
  - match:
    - uri:
        prefix: "/api/v1/ai"
    route:
    - destination:
        host: ai-service.inergize-production.svc.cluster.local
        port:
          number: 3005
    timeout: 120s  # AI operations may take longer
    retries:
      attempts: 2
      perTryTimeout: 60s
    headers:
      request:
        add:
          x-forwarded-proto: "https"
          x-security-context: "zero-trust"
          x-ai-context: "production"
  
  # WebSocket Analytics Routes
  - match:
    - uri:
        prefix: "/ws/analytics"
    route:
    - destination:
        host: analytics-service.inergize-production.svc.cluster.local
        port:
          number: 3007
    timeout: 0s  # No timeout for WebSocket
    headers:
      request:
        add:
          x-forwarded-proto: "https"
          x-security-context: "zero-trust"
  
  # Web Frontend Routes
  - match:
    - uri:
        prefix: "/"
    route:
    - destination:
        host: web-frontend.inergize-production.svc.cluster.local
        port:
          number: 3000
    timeout: 30s
    headers:
      request:
        add:
          x-forwarded-proto: "https"
          x-security-context: "zero-trust"

---
# Destination Rules - mTLS and Load Balancing
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: inergize-services-mtls
  namespace: inergize-production
  labels:
    security.inergize.com/mtls: "strict"
spec:
  host: "*.inergize-production.svc.cluster.local"
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL  # Enforce mTLS
    loadBalancer:
      simple: LEAST_CONN
    connectionPool:
      tcp:
        maxConnections: 100
      http:
        http1MaxPendingRequests: 50
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 3
        consecutiveGatewayErrors: 3
        interval: 30s
        baseEjectionTime: 30s
        maxEjectionPercent: 50
    outlierDetection:
      consecutiveGatewayErrors: 3
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50

---
# Auth Service Destination Rule
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: auth-service-dr
  namespace: inergize-production
spec:
  host: auth-service.inergize-production.svc.cluster.local
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
    loadBalancer:
      simple: ROUND_ROBIN
    connectionPool:
      tcp:
        maxConnections: 50
      http:
        http1MaxPendingRequests: 25
        http2MaxRequests: 50
        maxRequestsPerConnection: 5
    outlierDetection:
      consecutiveGatewayErrors: 2
      interval: 15s
      baseEjectionTime: 15s
      maxEjectionPercent: 30

---
# LinkedIn Service Destination Rule (Compliance Focus)
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: linkedin-service-dr
  namespace: inergize-production
  labels:
    compliance.inergize.com/critical: "true"
spec:
  host: linkedin-service.inergize-production.svc.cluster.local
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
    loadBalancer:
      simple: ROUND_ROBIN
    connectionPool:
      tcp:
        maxConnections: 20  # Conservative connection limits
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 20
        maxRequestsPerConnection: 2
        h2UpgradePolicy: UPGRADE  # Prefer HTTP/2
    outlierDetection:
      consecutiveGatewayErrors: 2
      interval: 60s  # Longer interval for compliance
      baseEjectionTime: 60s
      maxEjectionPercent: 50

---
# Analytics Service Destination Rule
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: analytics-service-dr
  namespace: inergize-production
spec:
  host: analytics-service.inergize-production.svc.cluster.local
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
    loadBalancer:
      simple: LEAST_CONN  # Better for analytics workloads
    connectionPool:
      tcp:
        maxConnections: 100
      http:
        http1MaxPendingRequests: 50
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
    outlierDetection:
      consecutiveGatewayErrors: 3
      interval: 30s
      baseEjectionTime: 30s

---
# PeerAuthentication - Enforce mTLS
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default-mtls-strict
  namespace: inergize-production
  labels:
    security.inergize.com/mtls: "strict"
spec:
  mtls:
    mode: STRICT  # Require mTLS for all traffic

---
# AuthorizationPolicy - Default Deny
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: default-deny
  namespace: inergize-production
  labels:
    security.inergize.com/policy: "deny-all"
spec:
  {}  # Empty policy = deny all

---
# AuthorizationPolicy - Auth Service Access
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: auth-service-policy
  namespace: inergize-production
  labels:
    security.inergize.com/service: "auth"
spec:
  selector:
    matchLabels:
      app: auth-service
  rules:
  # Allow ingress gateway access
  - from:
    - source:
        principals: ["cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account"]
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE"]
        paths: ["/api/v1/auth/*", "/health", "/ready"]
    when:
    - key: request.headers[x-security-context]
      values: ["zero-trust"]

---
# AuthorizationPolicy - LinkedIn Service (Ultra-Restricted)
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: linkedin-service-policy
  namespace: inergize-production
  labels:
    security.inergize.com/service: "linkedin"
    compliance.inergize.com/critical: "true"
spec:
  selector:
    matchLabels:
      app: linkedin-service
  rules:
  # Allow ingress gateway access with additional restrictions
  - from:
    - source:
        principals: ["cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account"]
    to:
    - operation:
        methods: ["GET", "POST", "PUT"]  # No DELETE operations
        paths: ["/api/v1/linkedin/*", "/health", "/ready"]
    when:
    - key: request.headers[x-security-context]
      values: ["zero-trust"]
    - key: request.headers[x-compliance-mode]
      values: ["ultra-conservative"]
  # Allow auth service to validate tokens
  - from:
    - source:
        principals: ["cluster.local/ns/inergize-production/sa/auth-service-sa"]
    to:
    - operation:
        methods: ["POST"]
        paths: ["/internal/validate"]

---
# AuthorizationPolicy - Analytics Service
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: analytics-service-policy
  namespace: inergize-production
  labels:
    security.inergize.com/service: "analytics"
spec:
  selector:
    matchLabels:
      app: analytics-service
  rules:
  # Allow ingress gateway access
  - from:
    - source:
        principals: ["cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account"]
    to:
    - operation:
        methods: ["GET", "POST", "PUT"]
        paths: ["/api/v1/analytics/*", "/ws/analytics/*", "/health", "/ready", "/metrics"]
    when:
    - key: request.headers[x-security-context]
      values: ["zero-trust"]
  # Allow web frontend WebSocket connections
  - from:
    - source:
        principals: ["cluster.local/ns/inergize-production/sa/web-frontend-sa"]
    to:
    - operation:
        methods: ["GET"]
        paths: ["/ws/analytics/*"]

---
# AuthorizationPolicy - AI Service
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: ai-service-policy
  namespace: inergize-production
  labels:
    security.inergize.com/service: "ai"
spec:
  selector:
    matchLabels:
      app: ai-service
  rules:
  # Allow ingress gateway access with rate limiting
  - from:
    - source:
        principals: ["cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account"]
    to:
    - operation:
        methods: ["POST"]  # Only POST for AI generation
        paths: ["/api/v1/ai/*", "/health", "/ready"]
    when:
    - key: request.headers[x-security-context]
      values: ["zero-trust"]
    - key: request.headers[x-ai-context]
      values: ["production"]

---
# AuthorizationPolicy - User Service
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: user-service-policy
  namespace: inergize-production
  labels:
    security.inergize.com/service: "user"
spec:
  selector:
    matchLabels:
      app: user-service
  rules:
  # Allow ingress gateway access
  - from:
    - source:
        principals: ["cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account"]
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE"]
        paths: ["/api/v1/users/*", "/health", "/ready"]
    when:
    - key: request.headers[x-security-context]
      values: ["zero-trust"]

---
# ServiceMonitor - Istio Metrics Collection
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: istio-mesh-metrics
  namespace: inergize-production
  labels:
    monitoring.inergize.com/tier: "infrastructure"
spec:
  selector:
    matchLabels:
      app: istiod
  endpoints:
  - port: http-monitoring
    interval: 30s
    path: /stats/prometheus

---
# EnvoyFilter - Security Headers
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: security-headers
  namespace: istio-system
  labels:
    security.inergize.com/headers: "enterprise"
spec:
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.local_response
        typed_config:
          "@type": type.googleapis.com/udpa.type.v1.TypedStruct
          type_url: type.googleapis.com/envoy.extensions.filters.http.local_response.v3.LocalResponse
          value:
            body_format:
              json_format:
                error: "Access Denied - Zero Trust Violation"
                timestamp: "%START_TIME%"
                request_id: "%REQ(X-REQUEST-ID)%"
  - applyTo: HTTP_ROUTE
    match:
      context: SIDECAR_INBOUND
    patch:
      operation: MERGE
      value:
        response_headers_to_add:
        - header:
            key: "Strict-Transport-Security"
            value: "max-age=31536000; includeSubDomains; preload"
          append: false
        - header:
            key: "X-Content-Type-Options"
            value: "nosniff"
          append: false
        - header:
            key: "X-Frame-Options"
            value: "DENY"
          append: false
        - header:
            key: "X-XSS-Protection"
            value: "1; mode=block"
          append: false
        - header:
            key: "Referrer-Policy"
            value: "strict-origin-when-cross-origin"
          append: false
        - header:
            key: "Content-Security-Policy"
            value: "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' wss: https:; font-src 'self'; object-src 'none'; media-src 'self'; frame-src 'none';"
          append: false

---
# Telemetry Configuration - Enhanced Observability
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: inergize-telemetry
  namespace: inergize-production
  labels:
    observability.inergize.com/level: "comprehensive"
spec:
  metrics:
  - providers:
    - name: prometheus
  - overrides:
    - match:
        metric: ALL_METRICS
      tagOverrides:
        security_context:
          value: "zero-trust"
        compliance_level:
          value: "enterprise"
  accessLogging:
  - providers:
    - name: otel
  tracing:
  - providers:
    - name: jaeger