// Mobile-Optimized Components - Enterprise-grade mobile performance
'use client';

import React, { 
  memo, 
  useState, 
  useEffect, 
  useCallback, 
  useMemo,
  useRef,
  forwardRef
} from 'react';
import { cn } from '@/lib/utils';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  ChevronDown, 
  ChevronUp, 
  Menu, 
  X, 
  Search,
  Filter,
  MoreVertical
} from 'lucide-react';

// Mobile-first responsive breakpoints hook\nconst useBreakpoint = () => {\n  const [breakpoint, setBreakpoint] = useState('mobile');\n  \n  useEffect(() => {\n    const updateBreakpoint = () => {\n      const width = window.innerWidth;\n      if (width < 640) setBreakpoint('mobile');\n      else if (width < 768) setBreakpoint('sm');\n      else if (width < 1024) setBreakpoint('md');\n      else if (width < 1280) setBreakpoint('lg');\n      else setBreakpoint('xl');\n    };\n    \n    updateBreakpoint();\n    window.addEventListener('resize', updateBreakpoint);\n    return () => window.removeEventListener('resize', updateBreakpoint);\n  }, []);\n  \n  return {\n    breakpoint,\n    isMobile: breakpoint === 'mobile',\n    isTablet: breakpoint === 'sm' || breakpoint === 'md',\n    isDesktop: breakpoint === 'lg' || breakpoint === 'xl'\n  };\n};\n\n// Touch-optimized button with haptic feedback\ninterface TouchButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: 'primary' | 'secondary' | 'ghost' | 'destructive';\n  size?: 'sm' | 'md' | 'lg';\n  loading?: boolean;\n  hapticFeedback?: boolean;\n  children: React.ReactNode;\n}\n\nexport const TouchButton = memo(forwardRef<HTMLButtonElement, TouchButtonProps>(\n  ({ \n    variant = 'primary', \n    size = 'md', \n    loading = false,\n    hapticFeedback = true,\n    className,\n    children,\n    onClick,\n    ...props \n  }, ref) => {\n    const handleClick = useCallback((e: React.MouseEvent<HTMLButtonElement>) => {\n      // Haptic feedback for mobile devices\n      if (hapticFeedback && 'vibrate' in navigator) {\n        navigator.vibrate(10);\n      }\n      \n      onClick?.(e);\n    }, [onClick, hapticFeedback]);\n    \n    const sizeClasses = {\n      sm: 'min-h-[40px] px-3 py-2 text-sm',\n      md: 'min-h-[44px] px-4 py-2.5 text-base',\n      lg: 'min-h-[48px] px-6 py-3 text-lg'\n    };\n    \n    const variantClasses = {\n      primary: 'bg-blue-600 hover:bg-blue-700 active:bg-blue-800 text-white shadow-lg active:shadow-md',\n      secondary: 'bg-gray-100 hover:bg-gray-200 active:bg-gray-300 text-gray-900 border border-gray-300',\n      ghost: 'hover:bg-gray-100 active:bg-gray-200 text-gray-700',\n      destructive: 'bg-red-600 hover:bg-red-700 active:bg-red-800 text-white shadow-lg active:shadow-md'\n    };\n    \n    return (\n      <button\n        ref={ref}\n        onClick={handleClick}\n        disabled={loading || props.disabled}\n        className={cn(\n          'inline-flex items-center justify-center rounded-lg font-medium',\n          'transition-all duration-150 ease-out',\n          'focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500',\n          'disabled:opacity-50 disabled:cursor-not-allowed',\n          'active:scale-95 transform',\n          'touch-manipulation select-none',\n          sizeClasses[size],\n          variantClasses[variant],\n          className\n        )}\n        {...props}\n      >\n        {loading ? (\n          <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent\" />\n        ) : (\n          children\n        )}\n      </button>\n    );\n  }\n));\n\nTouchButton.displayName = 'TouchButton';\n\n// Mobile-optimized collapsible section\ninterface MobileCollapsibleProps {\n  title: string;\n  children: React.ReactNode;\n  defaultOpen?: boolean;\n  badge?: string | number;\n  className?: string;\n}\n\nexport const MobileCollapsible = memo<MobileCollapsibleProps>(({ \n  title, \n  children, \n  defaultOpen = false,\n  badge,\n  className \n}) => {\n  const [isOpen, setIsOpen] = useState(defaultOpen);\n  const contentRef = useRef<HTMLDivElement>(null);\n  const [height, setHeight] = useState<number | undefined>(defaultOpen ? undefined : 0);\n  \n  const toggleOpen = useCallback(() => {\n    setIsOpen(prev => !prev);\n  }, []);\n  \n  useEffect(() => {\n    if (!contentRef.current) return;\n    \n    if (isOpen) {\n      const scrollHeight = contentRef.current.scrollHeight;\n      setHeight(scrollHeight);\n    } else {\n      setHeight(0);\n    }\n  }, [isOpen]);\n  \n  return (\n    <Card className={cn('overflow-hidden', className)}>\n      <button\n        onClick={toggleOpen}\n        className=\"w-full px-4 py-3 flex items-center justify-between text-left hover:bg-gray-50 active:bg-gray-100 transition-colors touch-manipulation\"\n      >\n        <div className=\"flex items-center space-x-3\">\n          <h3 className=\"font-medium text-gray-900\">{title}</h3>\n          {badge && (\n            <Badge variant=\"outline\" className=\"text-xs\">\n              {badge}\n            </Badge>\n          )}\n        </div>\n        {isOpen ? (\n          <ChevronUp className=\"h-5 w-5 text-gray-500\" />\n        ) : (\n          <ChevronDown className=\"h-5 w-5 text-gray-500\" />\n        )}\n      </button>\n      \n      <div\n        ref={contentRef}\n        style={{ height }}\n        className=\"transition-all duration-300 ease-in-out overflow-hidden\"\n      >\n        <div className=\"px-4 pb-4\">\n          {children}\n        </div>\n      </div>\n    </Card>\n  );\n});\n\nMobileCollapsible.displayName = 'MobileCollapsible';\n\n// Mobile-optimized navigation menu\ninterface MobileMenuProps {\n  isOpen: boolean;\n  onClose: () => void;\n  children: React.ReactNode;\n}\n\nexport const MobileMenu = memo<MobileMenuProps>(({ isOpen, onClose, children }) => {\n  const menuRef = useRef<HTMLDivElement>(null);\n  \n  // Close on escape key\n  useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape' && isOpen) {\n        onClose();\n      }\n    };\n    \n    document.addEventListener('keydown', handleEscape);\n    return () => document.removeEventListener('keydown', handleEscape);\n  }, [isOpen, onClose]);\n  \n  // Prevent body scroll when menu is open\n  useEffect(() => {\n    if (isOpen) {\n      document.body.style.overflow = 'hidden';\n      document.body.style.position = 'fixed';\n      document.body.style.width = '100%';\n    } else {\n      document.body.style.overflow = '';\n      document.body.style.position = '';\n      document.body.style.width = '';\n    }\n    \n    return () => {\n      document.body.style.overflow = '';\n      document.body.style.position = '';\n      document.body.style.width = '';\n    };\n  }, [isOpen]);\n  \n  if (!isOpen) return null;\n  \n  return (\n    <div className=\"fixed inset-0 z-50 lg:hidden\">\n      {/* Backdrop */}\n      <div \n        className=\"fixed inset-0 bg-black bg-opacity-50 transition-opacity\"\n        onClick={onClose}\n      />\n      \n      {/* Menu panel */}\n      <div \n        ref={menuRef}\n        className=\"fixed inset-y-0 right-0 w-full max-w-sm bg-white shadow-xl transform transition-transform duration-300 ease-in-out overflow-y-auto safe-area-inset-top safe-area-inset-bottom\"\n      >\n        <div className=\"flex items-center justify-between p-4 border-b border-gray-200\">\n          <h2 className=\"text-lg font-semibold text-gray-900\">Menu</h2>\n          <TouchButton\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onClose}\n            className=\"p-1\"\n            aria-label=\"Close menu\"\n          >\n            <X className=\"h-6 w-6\" />\n          </TouchButton>\n        </div>\n        \n        <div className=\"p-4\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n});\n\nMobileMenu.displayName = 'MobileMenu';\n\n// Mobile-optimized search and filter header\ninterface MobileSearchHeaderProps {\n  searchValue: string;\n  onSearchChange: (value: string) => void;\n  onFilterClick?: () => void;\n  onMenuClick?: () => void;\n  placeholder?: string;\n  showFilter?: boolean;\n  showMenu?: boolean;\n  filterCount?: number;\n}\n\nexport const MobileSearchHeader = memo<MobileSearchHeaderProps>({\n  searchValue,\n  onSearchChange,\n  onFilterClick,\n  onMenuClick,\n  placeholder = \"Search...\",\n  showFilter = true,\n  showMenu = true,\n  filterCount = 0\n}) => {\n  const [isSearchFocused, setIsSearchFocused] = useState(false);\n  \n  return (\n    <div className=\"sticky top-0 z-40 bg-white border-b border-gray-200 safe-area-inset-top\">\n      <div className=\"px-4 py-3\">\n        <div className=\"flex items-center space-x-3\">\n          {/* Menu button */}\n          {showMenu && (\n            <TouchButton\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onMenuClick}\n              className=\"lg:hidden p-1\"\n              aria-label=\"Open menu\"\n            >\n              <Menu className=\"h-6 w-6\" />\n            </TouchButton>\n          )}\n          \n          {/* Search input */}\n          <div className=\"flex-1 relative\">\n            <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n              <Search className=\"h-5 w-5 text-gray-400\" />\n            </div>\n            <input\n              type=\"text\"\n              value={searchValue}\n              onChange={(e) => onSearchChange(e.target.value)}\n              onFocus={() => setIsSearchFocused(true)}\n              onBlur={() => setIsSearchFocused(false)}\n              placeholder={placeholder}\n              className={cn(\n                'block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg',\n                'placeholder-gray-500 text-gray-900 text-base',\n                'focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent',\n                'transition-all duration-200',\n                isSearchFocused && 'shadow-lg'\n              )}\n            />\n          </div>\n          \n          {/* Filter button */}\n          {showFilter && (\n            <div className=\"relative\">\n              <TouchButton\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={onFilterClick}\n                className=\"p-2 relative\"\n                aria-label=\"Open filters\"\n              >\n                <Filter className=\"h-5 w-5\" />\n                {filterCount > 0 && (\n                  <Badge \n                    className=\"absolute -top-1 -right-1 h-5 w-5 p-0 text-xs flex items-center justify-center bg-red-500 text-white\"\n                  >\n                    {filterCount > 9 ? '9+' : filterCount}\n                  </Badge>\n                )}\n              </TouchButton>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n});\n\nMobileSearchHeader.displayName = 'MobileSearchHeader';\n\n// Mobile-optimized card with swipe actions\ninterface SwipeableCardProps {\n  children: React.ReactNode;\n  onSwipeLeft?: () => void;\n  onSwipeRight?: () => void;\n  swipeLeftLabel?: string;\n  swipeRightLabel?: string;\n  swipeThreshold?: number;\n  className?: string;\n}\n\nexport const SwipeableCard = memo<SwipeableCardProps>({\n  children,\n  onSwipeLeft,\n  onSwipeRight,\n  swipeLeftLabel = \"Delete\",\n  swipeRightLabel = \"Archive\",\n  swipeThreshold = 100,\n  className\n}) => {\n  const [dragX, setDragX] = useState(0);\n  const [isDragging, setIsDragging] = useState(false);\n  const cardRef = useRef<HTMLDivElement>(null);\n  const startX = useRef(0);\n  \n  const handleTouchStart = useCallback((e: React.TouchEvent) => {\n    startX.current = e.touches[0].clientX;\n    setIsDragging(true);\n  }, []);\n  \n  const handleTouchMove = useCallback((e: React.TouchEvent) => {\n    if (!isDragging) return;\n    \n    const currentX = e.touches[0].clientX;\n    const diff = currentX - startX.current;\n    setDragX(diff);\n  }, [isDragging]);\n  \n  const handleTouchEnd = useCallback(() => {\n    setIsDragging(false);\n    \n    if (Math.abs(dragX) > swipeThreshold) {\n      if (dragX > 0 && onSwipeRight) {\n        onSwipeRight();\n      } else if (dragX < 0 && onSwipeLeft) {\n        onSwipeLeft();\n      }\n    }\n    \n    setDragX(0);\n  }, [dragX, swipeThreshold, onSwipeLeft, onSwipeRight]);\n  \n  const showActions = Math.abs(dragX) > swipeThreshold / 2;\n  \n  return (\n    <div className=\"relative overflow-hidden\">\n      {/* Background actions */}\n      {showActions && (\n        <div className=\"absolute inset-0 flex\">\n          {dragX > 0 && onSwipeRight && (\n            <div className=\"flex-1 bg-green-500 flex items-center justify-start pl-4\">\n              <span className=\"text-white font-medium\">{swipeRightLabel}</span>\n            </div>\n          )}\n          {dragX < 0 && onSwipeLeft && (\n            <div className=\"flex-1 bg-red-500 flex items-center justify-end pr-4\">\n              <span className=\"text-white font-medium\">{swipeLeftLabel}</span>\n            </div>\n          )}\n        </div>\n      )}\n      \n      {/* Card content */}\n      <Card\n        ref={cardRef}\n        className={cn(\n          'transition-transform duration-200 ease-out touch-pan-y',\n          className\n        )}\n        style={{\n          transform: `translateX(${dragX}px)`,\n        }}\n        onTouchStart={handleTouchStart}\n        onTouchMove={handleTouchMove}\n        onTouchEnd={handleTouchEnd}\n      >\n        {children}\n      </Card>\n    </div>\n  );\n});\n\nSwipeableCard.displayName = 'SwipeableCard';\n\n// Mobile-optimized bottom sheet\ninterface BottomSheetProps {\n  isOpen: boolean;\n  onClose: () => void;\n  title?: string;\n  children: React.ReactNode;\n  snapPoints?: number[];\n  initialSnap?: number;\n}\n\nexport const BottomSheet = memo<BottomSheetProps>({\n  isOpen,\n  onClose,\n  title,\n  children,\n  snapPoints = [0.3, 0.6, 0.9],\n  initialSnap = 1\n}) => {\n  const [currentSnap, setCurrentSnap] = useState(initialSnap);\n  const [dragY, setDragY] = useState(0);\n  const [isDragging, setIsDragging] = useState(false);\n  const sheetRef = useRef<HTMLDivElement>(null);\n  const startY = useRef(0);\n  \n  const handleTouchStart = useCallback((e: React.TouchEvent) => {\n    startY.current = e.touches[0].clientY;\n    setIsDragging(true);\n  }, []);\n  \n  const handleTouchMove = useCallback((e: React.TouchEvent) => {\n    if (!isDragging) return;\n    \n    const currentY = e.touches[0].clientY;\n    const diff = currentY - startY.current;\n    setDragY(Math.max(0, diff)); // Only allow dragging down\n  }, [isDragging]);\n  \n  const handleTouchEnd = useCallback(() => {\n    setIsDragging(false);\n    \n    // Determine closest snap point\n    const currentHeight = window.innerHeight * snapPoints[currentSnap] - dragY;\n    const targetSnapIndex = snapPoints.findIndex((snap, index) => {\n      const snapHeight = window.innerHeight * snap;\n      return currentHeight >= snapHeight - 50; // 50px threshold\n    });\n    \n    if (targetSnapIndex === -1 || dragY > 100) {\n      onClose();\n    } else {\n      setCurrentSnap(targetSnapIndex);\n    }\n    \n    setDragY(0);\n  }, [isDragging, dragY, snapPoints, currentSnap, onClose]);\n  \n  if (!isOpen) return null;\n  \n  const sheetHeight = window.innerHeight * snapPoints[currentSnap] - dragY;\n  \n  return (\n    <div className=\"fixed inset-0 z-50\">\n      {/* Backdrop */}\n      <div \n        className=\"fixed inset-0 bg-black bg-opacity-50 transition-opacity\"\n        onClick={onClose}\n      />\n      \n      {/* Sheet */}\n      <div \n        ref={sheetRef}\n        className=\"fixed bottom-0 left-0 right-0 bg-white rounded-t-2xl shadow-2xl transition-transform duration-300 ease-out overflow-hidden\"\n        style={{\n          height: sheetHeight,\n          transform: isDragging ? 'none' : undefined\n        }}\n      >\n        {/* Handle */}\n        <div \n          className=\"flex justify-center pt-3 pb-2 cursor-grab active:cursor-grabbing\"\n          onTouchStart={handleTouchStart}\n          onTouchMove={handleTouchMove}\n          onTouchEnd={handleTouchEnd}\n        >\n          <div className=\"w-12 h-1 bg-gray-300 rounded-full\" />\n        </div>\n        \n        {/* Header */}\n        {title && (\n          <div className=\"px-4 pb-4 border-b border-gray-200\">\n            <h2 className=\"text-lg font-semibold text-gray-900\">{title}</h2>\n          </div>\n        )}\n        \n        {/* Content */}\n        <div className=\"flex-1 overflow-y-auto p-4 safe-area-inset-bottom\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n});\n\nBottomSheet.displayName = 'BottomSheet';\n\nexport { useBreakpoint };