// Accessible Components Library - WCAG 2.1 AA Compliant
'use client';

import React, { 
  memo, 
  forwardRef, 
  useState, 
  useEffect, 
  useCallback, 
  useRef,
  useId,
  createContext,
  useContext
} from 'react';
import { cn } from '@/lib/utils';
import { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { \n  AlertCircle, \n  CheckCircle, \n  Info, \n  AlertTriangle,\n  X,\n  ChevronDown,\n  Eye,\n  EyeOff\n} from 'lucide-react';\n\n// Accessibility context for managing focus and announcements\ninterface A11yContextValue {\n  announceToScreenReader: (message: string, priority?: 'polite' | 'assertive') => void;\n  focusManagement: {\n    trapFocus: (container: HTMLElement) => () => void;\n    restoreFocus: (element: HTMLElement | null) => void;\n  };\n}\n\nconst A11yContext = createContext<A11yContextValue | null>(null);\n\n// Screen reader announcements\nconst useScreenReaderAnnouncement = () => {\n  const announcementRef = useRef<HTMLDivElement>(null);\n  \n  const announce = useCallback((message: string, priority: 'polite' | 'assertive' = 'polite') => {\n    if (announcementRef.current) {\n      announcementRef.current.textContent = message;\n      announcementRef.current.setAttribute('aria-live', priority);\n      \n      // Clear after announcement\n      setTimeout(() => {\n        if (announcementRef.current) {\n          announcementRef.current.textContent = '';\n        }\n      }, 1000);\n    }\n  }, []);\n  \n  const AnnouncementRegion = memo(() => (\n    <div\n      ref={announcementRef}\n      className=\"sr-only\"\n      aria-live=\"polite\"\n      aria-atomic=\"true\"\n    />\n  ));\n  \n  AnnouncementRegion.displayName = 'AnnouncementRegion';\n  \n  return { announce, AnnouncementRegion };\n};\n\n// Focus management hook\nconst useFocusManagement = () => {\n  const trapFocus = useCallback((container: HTMLElement) => {\n    const focusableElements = container.querySelectorAll(\n      'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n    );\n    const firstElement = focusableElements[0] as HTMLElement;\n    const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;\n    \n    const handleTabKey = (e: KeyboardEvent) => {\n      if (e.key === 'Tab') {\n        if (e.shiftKey) {\n          if (document.activeElement === firstElement) {\n            lastElement?.focus();\n            e.preventDefault();\n          }\n        } else {\n          if (document.activeElement === lastElement) {\n            firstElement?.focus();\n            e.preventDefault();\n          }\n        }\n      }\n    };\n    \n    container.addEventListener('keydown', handleTabKey);\n    firstElement?.focus();\n    \n    return () => {\n      container.removeEventListener('keydown', handleTabKey);\n    };\n  }, []);\n  \n  const restoreFocus = useCallback((element: HTMLElement | null) => {\n    if (element && element.focus) {\n      element.focus();\n    }\n  }, []);\n  \n  return { trapFocus, restoreFocus };\n};\n\n// Accessibility Provider\ninterface A11yProviderProps {\n  children: React.ReactNode;\n}\n\nexport const A11yProvider = memo<A11yProviderProps>(({ children }) => {\n  const { announce, AnnouncementRegion } = useScreenReaderAnnouncement();\n  const focusManagement = useFocusManagement();\n  \n  const value: A11yContextValue = {\n    announceToScreenReader: announce,\n    focusManagement\n  };\n  \n  return (\n    <A11yContext.Provider value={value}>\n      {children}\n      <AnnouncementRegion />\n    </A11yContext.Provider>\n  );\n});\n\nA11yProvider.displayName = 'A11yProvider';\n\n// Hook to use accessibility context\nconst useA11y = () => {\n  const context = useContext(A11yContext);\n  if (!context) {\n    throw new Error('useA11y must be used within an A11yProvider');\n  }\n  return context;\n};\n\n// Accessible alert component\ninterface AccessibleAlertProps {\n  variant: 'success' | 'warning' | 'error' | 'info';\n  title?: string;\n  children: React.ReactNode;\n  dismissible?: boolean;\n  onDismiss?: () => void;\n  autoAnnounce?: boolean;\n  className?: string;\n}\n\nexport const AccessibleAlert = memo<AccessibleAlertProps>({\n  variant,\n  title,\n  children,\n  dismissible = false,\n  onDismiss,\n  autoAnnounce = true,\n  className\n}) => {\n  const alertId = useId();\n  const titleId = useId();\n  const { announceToScreenReader } = useA11y();\n  \n  const icons = {\n    success: CheckCircle,\n    warning: AlertTriangle,\n    error: AlertCircle,\n    info: Info\n  };\n  \n  const colors = {\n    success: 'border-green-200 bg-green-50 text-green-800',\n    warning: 'border-yellow-200 bg-yellow-50 text-yellow-800',\n    error: 'border-red-200 bg-red-50 text-red-800',\n    info: 'border-blue-200 bg-blue-50 text-blue-800'\n  };\n  \n  const iconColors = {\n    success: 'text-green-400',\n    warning: 'text-yellow-400',\n    error: 'text-red-400',\n    info: 'text-blue-400'\n  };\n  \n  const Icon = icons[variant];\n  \n  useEffect(() => {\n    if (autoAnnounce) {\n      const message = title ? `${title}: ${children}` : children;\n      announceToScreenReader(\n        typeof message === 'string' ? message : 'Alert notification',\n        variant === 'error' ? 'assertive' : 'polite'\n      );\n    }\n  }, [autoAnnounce, title, children, variant, announceToScreenReader]);\n  \n  return (\n    <div\n      id={alertId}\n      role=\"alert\"\n      aria-labelledby={title ? titleId : undefined}\n      className={cn(\n        'rounded-lg border p-4',\n        colors[variant],\n        className\n      )}\n    >\n      <div className=\"flex items-start\">\n        <div className=\"flex-shrink-0\">\n          <Icon className={cn('h-5 w-5', iconColors[variant])} aria-hidden=\"true\" />\n        </div>\n        <div className=\"ml-3 flex-1\">\n          {title && (\n            <h3 id={titleId} className=\"text-sm font-medium mb-1\">\n              {title}\n            </h3>\n          )}\n          <div className=\"text-sm\">\n            {children}\n          </div>\n        </div>\n        {dismissible && onDismiss && (\n          <div className=\"ml-auto pl-3\">\n            <button\n              onClick={onDismiss}\n              className={cn(\n                'inline-flex rounded-md p-1.5 focus:outline-none focus:ring-2 focus:ring-offset-2',\n                variant === 'success' && 'text-green-500 hover:bg-green-100 focus:ring-green-600',\n                variant === 'warning' && 'text-yellow-500 hover:bg-yellow-100 focus:ring-yellow-600',\n                variant === 'error' && 'text-red-500 hover:bg-red-100 focus:ring-red-600',\n                variant === 'info' && 'text-blue-500 hover:bg-blue-100 focus:ring-blue-600'\n              )}\n              aria-label=\"Dismiss alert\"\n            >\n              <X className=\"h-4 w-4\" aria-hidden=\"true\" />\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n});\n\nAccessibleAlert.displayName = 'AccessibleAlert';\n\n// Accessible form field with comprehensive validation\ninterface AccessibleFormFieldProps {\n  label: string;\n  children: React.ReactElement;\n  error?: string;\n  description?: string;\n  required?: boolean;\n  className?: string;\n}\n\nexport const AccessibleFormField = memo<AccessibleFormFieldProps>({\n  label,\n  children,\n  error,\n  description,\n  required = false,\n  className\n}) => {\n  const fieldId = useId();\n  const errorId = useId();\n  const descriptionId = useId();\n  \n  const childWithProps = React.cloneElement(children, {\n    id: fieldId,\n    'aria-describedby': [\n      error ? errorId : null,\n      description ? descriptionId : null\n    ].filter(Boolean).join(' ') || undefined,\n    'aria-invalid': error ? 'true' : undefined,\n    'aria-required': required ? 'true' : undefined,\n  });\n  \n  return (\n    <div className={cn('space-y-2', className)}>\n      <label \n        htmlFor={fieldId} \n        className=\"block text-sm font-medium text-gray-700\"\n      >\n        {label}\n        {required && (\n          <span className=\"text-red-500 ml-1\" aria-label=\"required\">\n            *\n          </span>\n        )}\n      </label>\n      \n      {description && (\n        <p id={descriptionId} className=\"text-sm text-gray-500\">\n          {description}\n        </p>\n      )}\n      \n      {childWithProps}\n      \n      {error && (\n        <p id={errorId} className=\"text-sm text-red-600\" role=\"alert\">\n          <AlertCircle className=\"inline h-4 w-4 mr-1\" aria-hidden=\"true\" />\n          {error}\n        </p>\n      )}\n    </div>\n  );\n});\n\nAccessibleFormField.displayName = 'AccessibleFormField';\n\n// Accessible modal with focus management\ninterface AccessibleModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  title: string;\n  children: React.ReactNode;\n  closeOnEscape?: boolean;\n  closeOnOverlayClick?: boolean;\n  initialFocus?: React.RefObject<HTMLElement>;\n  className?: string;\n}\n\nexport const AccessibleModal = memo<AccessibleModalProps>({\n  isOpen,\n  onClose,\n  title,\n  children,\n  closeOnEscape = true,\n  closeOnOverlayClick = true,\n  initialFocus,\n  className\n}) => {\n  const modalRef = useRef<HTMLDivElement>(null);\n  const previousFocusRef = useRef<HTMLElement | null>(null);\n  const titleId = useId();\n  const { focusManagement } = useA11y();\n  \n  useEffect(() => {\n    if (isOpen) {\n      // Store previously focused element\n      previousFocusRef.current = document.activeElement as HTMLElement;\n      \n      // Trap focus within modal\n      if (modalRef.current) {\n        const cleanup = focusManagement.trapFocus(modalRef.current);\n        \n        // Focus initial element or first focusable element\n        if (initialFocus?.current) {\n          initialFocus.current.focus();\n        }\n        \n        return cleanup;\n      }\n    } else {\n      // Restore focus when modal closes\n      focusManagement.restoreFocus(previousFocusRef.current);\n    }\n  }, [isOpen, focusManagement, initialFocus]);\n  \n  useEffect(() => {\n    if (!closeOnEscape) return;\n    \n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape' && isOpen) {\n        onClose();\n      }\n    };\n    \n    document.addEventListener('keydown', handleEscape);\n    return () => document.removeEventListener('keydown', handleEscape);\n  }, [isOpen, onClose, closeOnEscape]);\n  \n  if (!isOpen) return null;\n  \n  return (\n    <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n      <div className=\"flex min-h-screen items-center justify-center p-4\">\n        {/* Backdrop */}\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 transition-opacity\"\n          onClick={closeOnOverlayClick ? onClose : undefined}\n          aria-hidden=\"true\"\n        />\n        \n        {/* Modal */}\n        <Card\n          ref={modalRef}\n          role=\"dialog\"\n          aria-modal=\"true\"\n          aria-labelledby={titleId}\n          className={cn(\n            'relative w-full max-w-lg transform overflow-hidden transition-all',\n            className\n          )}\n        >\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <div className=\"flex items-center justify-between\">\n              <h2 id={titleId} className=\"text-lg font-semibold text-gray-900\">\n                {title}\n              </h2>\n              <button\n                onClick={onClose}\n                className=\"rounded-md p-1 text-gray-400 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                aria-label=\"Close modal\"\n              >\n                <X className=\"h-5 w-5\" aria-hidden=\"true\" />\n              </button>\n            </div>\n          </div>\n          \n          <div className=\"px-6 py-4\">\n            {children}\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n});\n\nAccessibleModal.displayName = 'AccessibleModal';\n\n// Accessible toggle button\ninterface AccessibleToggleProps {\n  pressed: boolean;\n  onToggle: (pressed: boolean) => void;\n  children: React.ReactNode;\n  ariaLabel?: string;\n  size?: 'sm' | 'md' | 'lg';\n  variant?: 'default' | 'outline';\n  disabled?: boolean;\n  className?: string;\n}\n\nexport const AccessibleToggle = memo<AccessibleToggleProps>({\n  pressed,\n  onToggle,\n  children,\n  ariaLabel,\n  size = 'md',\n  variant = 'default',\n  disabled = false,\n  className\n}) => {\n  const { announceToScreenReader } = useA11y();\n  \n  const handleToggle = useCallback(() => {\n    const newPressed = !pressed;\n    onToggle(newPressed);\n    \n    if (ariaLabel) {\n      announceToScreenReader(\n        `${ariaLabel} ${newPressed ? 'activated' : 'deactivated'}`,\n        'polite'\n      );\n    }\n  }, [pressed, onToggle, ariaLabel, announceToScreenReader]);\n  \n  const sizeClasses = {\n    sm: 'px-3 py-1.5 text-sm',\n    md: 'px-4 py-2 text-base',\n    lg: 'px-6 py-3 text-lg'\n  };\n  \n  const variantClasses = {\n    default: pressed \n      ? 'bg-blue-600 text-white border-blue-600' \n      : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50',\n    outline: pressed\n      ? 'bg-blue-50 text-blue-700 border-blue-300'\n      : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'\n  };\n  \n  return (\n    <button\n      type=\"button\"\n      role=\"button\"\n      aria-pressed={pressed}\n      aria-label={ariaLabel}\n      onClick={handleToggle}\n      disabled={disabled}\n      className={cn(\n        'inline-flex items-center border rounded-md font-medium',\n        'focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500',\n        'disabled:opacity-50 disabled:cursor-not-allowed',\n        'transition-colors duration-200',\n        sizeClasses[size],\n        variantClasses[variant],\n        className\n      )}\n    >\n      {children}\n    </button>\n  );\n});\n\nAccessibleToggle.displayName = 'AccessibleToggle';\n\n// Accessible combobox/select\ninterface AccessibleComboboxProps {\n  label: string;\n  options: Array<{ value: string; label: string; disabled?: boolean }>;\n  value: string;\n  onChange: (value: string) => void;\n  placeholder?: string;\n  searchable?: boolean;\n  error?: string;\n  required?: boolean;\n  className?: string;\n}\n\nexport const AccessibleCombobox = memo<AccessibleComboboxProps>({\n  label,\n  options,\n  value,\n  onChange,\n  placeholder = \"Select an option\",\n  searchable = false,\n  error,\n  required = false,\n  className\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [activeIndex, setActiveIndex] = useState(-1);\n  \n  const comboboxId = useId();\n  const listboxId = useId();\n  const errorId = useId();\n  \n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const listRef = useRef<HTMLUListElement>(null);\n  \n  const { announceToScreenReader } = useA11y();\n  \n  const filteredOptions = useMemo(() => {\n    if (!searchable || !searchQuery) return options;\n    return options.filter(option => \n      option.label.toLowerCase().includes(searchQuery.toLowerCase())\n    );\n  }, [options, searchQuery, searchable]);\n  \n  const selectedOption = options.find(option => option.value === value);\n  \n  const handleOptionSelect = useCallback((optionValue: string) => {\n    onChange(optionValue);\n    setIsOpen(false);\n    setSearchQuery('');\n    setActiveIndex(-1);\n    buttonRef.current?.focus();\n    \n    const selectedLabel = options.find(opt => opt.value === optionValue)?.label;\n    if (selectedLabel) {\n      announceToScreenReader(`Selected ${selectedLabel}`, 'polite');\n    }\n  }, [onChange, options, announceToScreenReader]);\n  \n  const handleKeyDown = useCallback((e: React.KeyboardEvent) => {\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        if (!isOpen) {\n          setIsOpen(true);\n        } else {\n          setActiveIndex(prev => \n            prev < filteredOptions.length - 1 ? prev + 1 : 0\n          );\n        }\n        break;\n      case 'ArrowUp':\n        e.preventDefault();\n        if (isOpen) {\n          setActiveIndex(prev => \n            prev > 0 ? prev - 1 : filteredOptions.length - 1\n          );\n        }\n        break;\n      case 'Enter':\n      case ' ':\n        e.preventDefault();\n        if (isOpen && activeIndex >= 0) {\n          handleOptionSelect(filteredOptions[activeIndex].value);\n        } else {\n          setIsOpen(!isOpen);\n        }\n        break;\n      case 'Escape':\n        e.preventDefault();\n        setIsOpen(false);\n        setActiveIndex(-1);\n        buttonRef.current?.focus();\n        break;\n    }\n  }, [isOpen, activeIndex, filteredOptions, handleOptionSelect]);\n  \n  return (\n    <div className={cn('relative', className)}>\n      <label \n        htmlFor={comboboxId} \n        className=\"block text-sm font-medium text-gray-700 mb-2\"\n      >\n        {label}\n        {required && (\n          <span className=\"text-red-500 ml-1\" aria-label=\"required\">\n            *\n          </span>\n        )}\n      </label>\n      \n      <div className=\"relative\">\n        <button\n          ref={buttonRef}\n          id={comboboxId}\n          type=\"button\"\n          role=\"combobox\"\n          aria-expanded={isOpen}\n          aria-haspopup=\"listbox\"\n          aria-controls={listboxId}\n          aria-describedby={error ? errorId : undefined}\n          aria-invalid={error ? 'true' : undefined}\n          onClick={() => setIsOpen(!isOpen)}\n          onKeyDown={handleKeyDown}\n          className={cn(\n            'relative w-full bg-white border rounded-md pl-3 pr-10 py-2 text-left cursor-default',\n            'focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500',\n            error ? 'border-red-300' : 'border-gray-300',\n            'sm:text-sm'\n          )}\n        >\n          <span className=\"block truncate\">\n            {selectedOption?.label || placeholder}\n          </span>\n          <span className=\"absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\">\n            <ChevronDown className=\"h-5 w-5 text-gray-400\" aria-hidden=\"true\" />\n          </span>\n        </button>\n        \n        {isOpen && (\n          <ul\n            ref={listRef}\n            id={listboxId}\n            role=\"listbox\"\n            aria-labelledby={comboboxId}\n            className=\"absolute z-10 mt-1 w-full bg-white shadow-lg max-h-60 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm overflow-auto\"\n          >\n            {filteredOptions.length > 0 ? (\n              filteredOptions.map((option, index) => (\n                <li\n                  key={option.value}\n                  role=\"option\"\n                  aria-selected={option.value === value}\n                  onClick={() => handleOptionSelect(option.value)}\n                  className={cn(\n                    'cursor-default select-none relative py-2 pl-3 pr-9',\n                    activeIndex === index\n                      ? 'text-white bg-blue-600'\n                      : 'text-gray-900',\n                    option.disabled && 'opacity-50 cursor-not-allowed'\n                  )}\n                >\n                  <span className={cn(\n                    'block truncate',\n                    option.value === value ? 'font-semibold' : 'font-normal'\n                  )}>\n                    {option.label}\n                  </span>\n                  \n                  {option.value === value && (\n                    <span className={cn(\n                      'absolute inset-y-0 right-0 flex items-center pr-4',\n                      activeIndex === index ? 'text-white' : 'text-blue-600'\n                    )}>\n                      <CheckCircle className=\"h-5 w-5\" aria-hidden=\"true\" />\n                    </span>\n                  )}\n                </li>\n              ))\n            ) : (\n              <li className=\"text-gray-500 text-center py-2\">\n                No options found\n              </li>\n            )}\n          </ul>\n        )}\n      </div>\n      \n      {error && (\n        <p id={errorId} className=\"mt-2 text-sm text-red-600\" role=\"alert\">\n          <AlertCircle className=\"inline h-4 w-4 mr-1\" aria-hidden=\"true\" />\n          {error}\n        </p>\n      )}\n    </div>\n  );\n});\n\nAccessibleCombobox.displayName = 'AccessibleCombobox';\n\n// Accessible password input with show/hide toggle\ninterface AccessiblePasswordInputProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'type'> {\n  label: string;\n  error?: string;\n  showPasswordToggle?: boolean;\n}\n\nexport const AccessiblePasswordInput = memo(forwardRef<HTMLInputElement, AccessiblePasswordInputProps>(\n  ({ label, error, showPasswordToggle = true, className, ...props }, ref) => {\n    const [showPassword, setShowPassword] = useState(false);\n    const inputId = useId();\n    const errorId = useId();\n    const toggleId = useId();\n    \n    const togglePasswordVisibility = useCallback(() => {\n      setShowPassword(prev => !prev);\n    }, []);\n    \n    return (\n      <div className=\"space-y-2\">\n        <label htmlFor={inputId} className=\"block text-sm font-medium text-gray-700\">\n          {label}\n        </label>\n        \n        <div className=\"relative\">\n          <input\n            ref={ref}\n            id={inputId}\n            type={showPassword ? 'text' : 'password'}\n            aria-describedby={error ? errorId : undefined}\n            aria-invalid={error ? 'true' : undefined}\n            className={cn(\n              'block w-full px-3 py-2 border rounded-md shadow-sm placeholder-gray-400',\n              'focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500',\n              error ? 'border-red-300' : 'border-gray-300',\n              showPasswordToggle && 'pr-10',\n              className\n            )}\n            {...props}\n          />\n          \n          {showPasswordToggle && (\n            <button\n              id={toggleId}\n              type=\"button\"\n              onClick={togglePasswordVisibility}\n              className=\"absolute inset-y-0 right-0 flex items-center pr-3 text-gray-400 hover:text-gray-600 focus:outline-none focus:text-gray-600\"\n              aria-label={showPassword ? 'Hide password' : 'Show password'}\n              aria-pressed={showPassword}\n            >\n              {showPassword ? (\n                <EyeOff className=\"h-5 w-5\" aria-hidden=\"true\" />\n              ) : (\n                <Eye className=\"h-5 w-5\" aria-hidden=\"true\" />\n              )}\n            </button>\n          )}\n        </div>\n        \n        {error && (\n          <p id={errorId} className=\"text-sm text-red-600\" role=\"alert\">\n            <AlertCircle className=\"inline h-4 w-4 mr-1\" aria-hidden=\"true\" />\n            {error}\n          </p>\n        )}\n      </div>\n    );\n  }\n));\n\nAccessiblePasswordInput.displayName = 'AccessiblePasswordInput';\n\nexport { useA11y };