import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { TrendingUp, TrendingDown, Minus, Eye, Search, Users, CheckCircle } from 'lucide-react';
import { cn } from '@/lib/utils';

interface MetricSnapshot {
  profileViews: number;
  searchAppearances: number;
  connections: number;
  completenessScore: number;
  engagementRate: number;
}

interface MetricTrends {
  profileViewsTrend: number;
  searchAppearancesTrend: number;
  connectionsTrend: number;
  completenessTrend: number;
  engagementTrend: number;
}

interface DashboardMetrics {
  userId: string;
  snapshot: MetricSnapshot;
  trends: MetricTrends;
  goals: {
    profileViewsGoal?: number;
    connectionsGoal?: number;
    completenessGoal?: number;
    engagementGoal?: number;
  };
  lastUpdated: string;
}

interface ProfileMetricsWidgetProps {
  className?: string;
}

const ProfileMetricsWidget: React.FC<ProfileMetricsWidgetProps> = ({ className }) => {
  const [metrics, setMetrics] = useState<DashboardMetrics | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [lastRefresh, setLastRefresh] = useState<Date>(new Date());
  const [isConnected, setIsConnected] = useState(false);
  const [connectionStatus, setConnectionStatus] = useState<'connected' | 'connecting' | 'disconnected'>('disconnected');

  useEffect(() => {
    fetchMetrics();
    
    // Set up WebSocket connection for real-time updates
    setupWebSocketConnection();
    
    // Set up fallback polling every 30 seconds
    const interval = setInterval(fetchMetrics, 30000);
    
    return () => {
      clearInterval(interval);
      // Cleanup WebSocket connection
    };
  }, []);

  const setupWebSocketConnection = () => {
    try {
      const token = localStorage.getItem('authToken');
      if (!token) return;

      setConnectionStatus('connecting');
      
      // WebSocket connection would be implemented here
      // For now, we'll simulate real-time updates
      const mockRealTimeUpdates = setInterval(() => {
        if (Math.random() < 0.1) { // 10% chance to update every 30 seconds
          fetchMetrics();
        }
      }, 30000);

      setConnectionStatus('connected');
      setIsConnected(true);

      return () => clearInterval(mockRealTimeUpdates);
    } catch (err) {
      setConnectionStatus('disconnected');
      setIsConnected(false);
    }
  };

  const fetchMetrics = async () => {
    try {
      const token = localStorage.getItem('authToken');
      
      // Enhanced API call with LinkedIn-specific endpoints
      const [metricsResponse, linkedinDataResponse] = await Promise.all([
        fetch('/api/v1/metrics/dashboard', {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        }),
        fetch('/api/v1/linkedin/profile/metrics', {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        })
      ]);

      if (!metricsResponse.ok) {
        throw new Error('Failed to fetch metrics');
      }

      const metricsData = await metricsResponse.json();
      
      // Merge LinkedIn-specific data if available
      let enhancedMetrics = metricsData.data;
      if (linkedinDataResponse.ok) {
        const linkedinData = await linkedinDataResponse.json();
        enhancedMetrics = {
          ...enhancedMetrics,
          linkedinSpecific: linkedinData.data,
          // Add LinkedIn compliance status
          complianceStatus: linkedinData.data?.complianceStatus || 'unknown',
          // Add rate limit information
          rateLimitStatus: linkedinData.data?.rateLimitStatus || null
        };
      }

      setMetrics(enhancedMetrics);
      setLastRefresh(new Date());
      setError(null);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Unknown error');
    } finally {
      setLoading(false);
    }
  };

  const getLinkedInComplianceStatus = () => {
    if (!metrics?.complianceStatus) return null;
    
    const status = metrics.complianceStatus;
    const colors = {
      good: 'text-green-600 bg-green-100',
      warning: 'text-yellow-600 bg-yellow-100',
      critical: 'text-red-600 bg-red-100',
      unknown: 'text-gray-600 bg-gray-100'
    };
    
    return (
      <div className={cn('px-2 py-1 rounded-full text-xs font-medium', colors[status as keyof typeof colors])}>
        {status.charAt(0).toUpperCase() + status.slice(1)} Compliance
      </div>
    );
  };

  const getRateLimitInfo = () => {
    if (!metrics?.rateLimitStatus) return null;
    
    const { remaining, limit, resetTime } = metrics.rateLimitStatus;
    const percentage = (remaining / limit) * 100;
    
    return (
      <div className="text-xs text-gray-500">
        API Calls: {remaining}/{limit} remaining
        <div className="w-full bg-gray-200 rounded-full h-1 mt-1">
          <div
            className={cn(
              'h-1 rounded-full transition-all',
              percentage > 50 ? 'bg-green-500' : 
              percentage > 25 ? 'bg-yellow-500' : 'bg-red-500'
            )}
            style={{ width: `${percentage}%` }}
          />
        </div>
      </div>
    );
  };

  const getTrendIcon = (trend: number) => {
    if (trend > 0) return <TrendingUp className="h-4 w-4 text-green-500" />;
    if (trend < 0) return <TrendingDown className="h-4 w-4 text-red-500" />;
    return <Minus className="h-4 w-4 text-gray-500" />;
  };

  const getTrendColor = (trend: number) => {
    if (trend > 0) return 'text-green-600';
    if (trend < 0) return 'text-red-600';
    return 'text-gray-600';
  };

  const formatNumber = (num: number): string => {
    if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`;
    if (num >= 1000) return `${(num / 1000).toFixed(1)}K`;
    return num.toString();
  };

  const formatTrend = (trend: number): string => {
    const abs = Math.abs(trend);
    return `${trend > 0 ? '+' : trend < 0 ? '-' : ''}${abs.toFixed(1)}%`;
  };

  const EnhancedMetricCard: React.FC<{
    title: string;
    value: number;
    trend: number;
    icon: React.ReactNode;
    goal?: number;
    suffix?: string;
    linkedinValue?: number;
    complianceNote?: string;
  }> = ({ title, value, trend, icon, goal, suffix = '', linkedinValue, complianceNote }) => {
    const progressPercentage = goal ? Math.min((value / goal) * 100, 100) : 0;
    const hasLinkedInData = linkedinValue !== undefined;
    
    return (
      <div className="bg-white rounded-lg border border-gray-200 p-4 hover:shadow-md transition-shadow">
        <div className="flex items-center justify-between mb-2">
          <div className="flex items-center space-x-2">
            {icon}
            <span className="text-sm font-medium text-gray-600">{title}</span>
            {isConnected && (
              <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse" title="Live updates" />
            )}
          </div>
          <div className="flex items-center space-x-1">
            {getTrendIcon(trend)}
            <span className={cn('text-xs font-medium', getTrendColor(trend))}>
              {formatTrend(trend)}
            </span>
          </div>
        </div>
        
        <div className="space-y-2">
          <div className="flex items-baseline space-x-1">
            <span className="text-2xl font-bold text-gray-900">
              {formatNumber(value)}
            </span>
            {suffix && <span className="text-sm text-gray-500">{suffix}</span>}
          </div>

          {/* LinkedIn specific data */}
          {hasLinkedInData && linkedinValue !== value && (
            <div className="text-xs text-blue-600">
              LinkedIn: {formatNumber(linkedinValue)}{suffix}
            </div>
          )}
          
          {goal && (
            <div className="space-y-1">
              <div className="flex justify-between text-xs text-gray-600">
                <span>Progress to goal</span>
                <span>{Math.round(progressPercentage)}%</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div
                  className={cn(
                    'h-2 rounded-full transition-all duration-300',
                    progressPercentage >= 100 ? 'bg-green-500' : 
                    progressPercentage >= 75 ? 'bg-blue-500' :
                    progressPercentage >= 50 ? 'bg-yellow-500' : 'bg-gray-400'
                  )}
                  style={{ width: `${Math.min(progressPercentage, 100)}%` }}
                />
              </div>
              <div className="text-xs text-gray-500">
                Goal: {formatNumber(goal)}{suffix}
              </div>
            </div>
          )}

          {/* Compliance note */}
          {complianceNote && (
            <div className="text-xs text-orange-600 bg-orange-50 p-1 rounded">
              {complianceNote}
            </div>
          )}
        </div>
      </div>
    );
  };

  if (loading) {
    return (
      <Card className={className}>
        <CardHeader>
          <CardTitle>Profile Metrics</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            {Array.from({ length: 4 }).map((_, i) => (
              <div key={i} className="bg-gray-100 rounded-lg p-4 animate-pulse">
                <div className="h-4 bg-gray-300 rounded mb-2"></div>
                <div className="h-8 bg-gray-300 rounded mb-2"></div>
                <div className="h-2 bg-gray-300 rounded"></div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card className={className}>
        <CardHeader>
          <CardTitle>Profile Metrics</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center py-8">
            <p className="text-red-600 mb-4">Failed to load metrics: {error}</p>
            <button
              onClick={fetchMetrics}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              Retry
            </button>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (!metrics) {
    return (
      <Card className={className}>
        <CardHeader>
          <CardTitle>Profile Metrics</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center py-8">
            <p className="text-gray-600">No metrics data available</p>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className={className}>
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center space-x-2">
            <span>Profile Metrics</span>
            {connectionStatus === 'connected' && (
              <div className="flex items-center space-x-1 text-green-600">
                <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse" />
                <span className="text-xs">Live</span>
              </div>
            )}
          </CardTitle>
          <div className="flex items-center space-x-3">
            {getLinkedInComplianceStatus()}
            <div className="text-xs text-gray-500">
              Last updated: {lastRefresh.toLocaleTimeString()}
            </div>
          </div>
        </div>
        {getRateLimitInfo() && (
          <div className="mt-2">
            {getRateLimitInfo()}
          </div>
        )}
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <EnhancedMetricCard
            title="Profile Views"
            value={metrics.snapshot.profileViews}
            trend={metrics.trends.profileViewsTrend}
            icon={<Eye className="h-4 w-4 text-blue-500" />}
            goal={metrics.goals.profileViewsGoal}
            linkedinValue={metrics.linkedinSpecific?.profileViews}
            complianceNote="LinkedIn views updated every 24h"
          />
          
          <EnhancedMetricCard
            title="Search Appearances"
            value={metrics.snapshot.searchAppearances}
            trend={metrics.trends.searchAppearancesTrend}
            icon={<Search className="h-4 w-4 text-green-500" />}
            linkedinValue={metrics.linkedinSpecific?.searchAppearances}
            complianceNote="Based on LinkedIn Search API"
          />
          
          <EnhancedMetricCard
            title="Connections"
            value={metrics.snapshot.connections}
            trend={metrics.trends.connectionsTrend}
            icon={<Users className="h-4 w-4 text-purple-500" />}
            goal={metrics.goals.connectionsGoal}
            linkedinValue={metrics.linkedinSpecific?.connections}
            complianceNote="Safe networking limits applied"
          />
          
          <EnhancedMetricCard
            title="Profile Score"
            value={metrics.snapshot.completenessScore}
            trend={metrics.trends.completenessTrend}
            icon={<CheckCircle className="h-4 w-4 text-orange-500" />}
            goal={metrics.goals.completenessGoal}
            suffix="%"
            complianceNote="Based on LinkedIn best practices"
          />
        </div>

        {/* Additional LinkedIn-specific metrics */}
        {metrics.linkedinSpecific && (
          <div className="mt-6 p-4 bg-blue-50 rounded-lg">
            <h4 className="font-medium text-blue-900 mb-2">LinkedIn Insights</h4>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
              {metrics.linkedinSpecific.industryRank && (
                <div>
                  <span className="text-blue-700">Industry Rank:</span>
                  <span className="font-medium ml-1">Top {metrics.linkedinSpecific.industryRank}%</span>
                </div>
              )}
              {metrics.linkedinSpecific.weeklyViews && (
                <div>
                  <span className="text-blue-700">Weekly Views:</span>
                  <span className="font-medium ml-1">{formatNumber(metrics.linkedinSpecific.weeklyViews)}</span>
                </div>
              )}
              {metrics.linkedinSpecific.engagementRate && (
                <div>
                  <span className="text-blue-700">Engagement Rate:</span>
                  <span className="font-medium ml-1">{metrics.linkedinSpecific.engagementRate.toFixed(1)}%</span>
                </div>
              )}
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );

  if (loading) {
    return (
      <Card className={className}>
        <CardHeader>
          <CardTitle>Profile Metrics</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            {Array.from({ length: 4 }).map((_, i) => (
              <div key={i} className="bg-gray-100 rounded-lg p-4 animate-pulse">
                <div className="h-4 bg-gray-300 rounded mb-2"></div>
                <div className="h-8 bg-gray-300 rounded mb-2"></div>
                <div className="h-2 bg-gray-300 rounded"></div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card className={className}>
        <CardHeader>
          <CardTitle>Profile Metrics</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center py-8">
            <p className="text-red-600 mb-4">Failed to load metrics: {error}</p>
            <button
              onClick={fetchMetrics}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              Retry
            </button>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (!metrics) {
    return (
      <Card className={className}>
        <CardHeader>
          <CardTitle>Profile Metrics</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center py-8">
            <p className="text-gray-600">No metrics data available</p>
          </div>
        </CardContent>
      </Card>
    );
  }

  return mainContent;
};

export default ProfileMetricsWidget;