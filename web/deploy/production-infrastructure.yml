# Production Infrastructure Configuration
# InErgize LinkedIn Optimization Platform
# Docker Compose for Production Deployment

version: '3.8'

networks:
  inergize-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  inergize-monitoring:
    driver: bridge
    internal: false

volumes:
  postgres_prod_data:
    driver: local
  timescale_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  elasticsearch_prod_data:
    driver: local
  prometheus_prod_data:
    driver: local
  grafana_prod_data:
    driver: local
  kong_prod_data:
    driver: local
  ssl_certificates:
    driver: local

services:
  # Load Balancer & API Gateway
  kong:
    image: kong/kong-gateway:latest
    container_name: inergize-kong-prod
    restart: unless-stopped
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:8000, 0.0.0.0:8443 ssl
      KONG_SSL_CERT: /etc/ssl/certs/inergize.crt
      KONG_SSL_CERT_KEY: /etc/ssl/private/inergize.key
      KONG_PLUGINS: bundled,rate-limiting,cors,jwt,prometheus,request-transformer
      KONG_LOG_LEVEL: notice
      KONG_NGINX_WORKER_PROCESSES: auto
      KONG_UPSTREAM_KEEPALIVE: 60
    ports:
      - "80:8000"      # HTTP
      - "443:8443"     # HTTPS
      - "8001:8001"    # Admin API
    volumes:
      - ssl_certificates:/etc/ssl
      - kong_prod_data:/var/lib/kong
    networks:
      - inergize-prod
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Web Application (Next.js)
  web:
    build:
      context: ..
      dockerfile: Dockerfile
      target: runner
    container_name: inergize-web-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      HOSTNAME: 0.0.0.0
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      # Service URLs (internal)
      AUTH_SERVICE_URL: http://auth-service:3001
      USER_SERVICE_URL: http://user-service:3002
      LINKEDIN_SERVICE_URL: http://linkedin-service:3003
      ANALYTICS_SERVICE_URL: http://analytics-service:3004
      AI_SERVICE_URL: http://ai-service:3005
    ports:
      - "3000:3000"
    networks:
      - inergize-prod
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Primary Database (PostgreSQL)
  postgres:
    image: postgres:15-alpine
    container_name: inergize-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-inergize_prod}
      POSTGRES_USER: ${POSTGRES_USER:-inergize_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MULTIPLE_DATABASES: ${KONG_PG_DATABASE:-kong}
    ports:
      - "5432:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - inergize-prod
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c log_statement=all
      -c log_min_duration_statement=1000
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-inergize_user} -d ${POSTGRES_DB:-inergize_prod}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Analytics Database (TimescaleDB)
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: inergize-timescale-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${TIMESCALE_DB:-inergize_analytics}
      POSTGRES_USER: ${TIMESCALE_USER:-analytics_user}
      POSTGRES_PASSWORD: ${TIMESCALE_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - timescale_prod_data:/var/lib/postgresql/data
    networks:
      - inergize-prod
    command: >
      postgres
      -c max_connections=100
      -c shared_buffers=512MB
      -c effective_cache_size=2GB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=32MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=8MB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TIMESCALE_USER:-analytics_user} -d ${TIMESCALE_DB:-inergize_analytics}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Cache & Message Queue (Redis)
  redis:
    image: redis:7-alpine
    container_name: inergize-redis-prod
    restart: unless-stopped
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_prod_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - inergize-prod
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Elasticsearch for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: inergize-elasticsearch-prod
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_prod_data:/usr/share/elasticsearch/data
    networks:
      - inergize-prod
      - inergize-monitoring
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: inergize-kibana-prod
    restart: unless-stopped
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - inergize-prod
      - inergize-monitoring
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: inergize-prometheus-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_prod_data:/prometheus
    networks:
      - inergize-prod
      - inergize-monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: inergize-grafana-prod
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3001:3000"
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - inergize-prod
      - inergize-monitoring
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NGINX for Static Assets & SSL Termination
  nginx:
    image: nginx:alpine
    container_name: inergize-nginx-prod
    restart: unless-stopped
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ssl_certificates:/etc/ssl:ro
      - ../public:/usr/share/nginx/html/static:ro
    networks:
      - inergize-prod
    depends_on:
      - web
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: inergize-backup-prod
    restart: "no"
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB:-inergize_prod}
      POSTGRES_USER: ${POSTGRES_USER:-inergize_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TIMESCALE_HOST: timescaledb
      TIMESCALE_DB: ${TIMESCALE_DB:-inergize_analytics}
      TIMESCALE_USER: ${TIMESCALE_USER:-analytics_user}
      TIMESCALE_PASSWORD: ${TIMESCALE_PASSWORD}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_BUCKET: ${S3_BACKUP_BUCKET}
    volumes:
      - ./backup-scripts:/scripts:ro
    networks:
      - inergize-prod
    depends_on:
      - postgres
      - timescaledb

  # Watchtower for Auto-Updates
  watchtower:
    image: containrrr/watchtower
    container_name: inergize-watchtower-prod
    restart: unless-stopped
    environment:
      WATCHTOWER_CLEANUP: true
      WATCHTOWER_POLL_INTERVAL: 3600
      WATCHTOWER_ROLLING_RESTART: true
      WATCHTOWER_NOTIFICATIONS: slack
      WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL: ${SLACK_WEBHOOK_URL}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - inergize-prod

# Production Resource Limits
x-resource-limits: &resource-limits
  deploy:
    resources:
      limits:
        memory: 2G
        cpus: '1.0'
      reservations:
        memory: 1G
        cpus: '0.5'