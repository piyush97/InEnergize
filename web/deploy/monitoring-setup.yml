# InErgize Monitoring Stack Configuration
# Comprehensive monitoring, alerting, and observability setup
# Prometheus + Grafana + AlertManager + ELK Stack

version: '3.8'

networks:
  monitoring:
    driver: bridge
    internal: false
  elk:
    driver: bridge
    internal: false

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  elasticsearch_data:
    driver: local
  kibana_data:
    driver: local
  logstash_data:
    driver: local

services:
  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: inergize-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--storage.tsdb.min-block-duration=2h'
      - '--storage.tsdb.max-block-duration=2h'
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node Exporter - System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: inergize-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - monitoring

  # cAdvisor - Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: inergize-cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    networks:
      - monitoring
    privileged: true

  # AlertManager - Alert Management
  alertmanager:
    image: prom/alertmanager:latest
    container_name: inergize-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.advertise-address=0.0.0.0:9093'
    networks:
      - monitoring
    environment:
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - PAGERDUTY_INTEGRATION_KEY=${PAGERDUTY_INTEGRATION_KEY}

  # Grafana - Visualization & Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: inergize-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel,grafana-worldmap-panel
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST}
      - GF_SMTP_USER=${SMTP_USER}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD}
      - GF_SMTP_FROM_ADDRESS=${SMTP_FROM_ADDRESS}
    networks:
      - monitoring
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch - Log Storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: inergize-elasticsearch
    restart: unless-stopped
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - elk
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Logstash - Log Processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: inergize-logstash
    restart: unless-stopped
    ports:
      - "5044:5044"    # Beats input
      - "5000:5000"    # TCP input
      - "9600:9600"    # API
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./logstash/config:/usr/share/logstash/config:ro
      - logstash_data:/usr/share/logstash/data
    environment:
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - "LS_JAVA_OPTS=-Xms1g -Xmx1g"
    networks:
      - elk
      - monitoring
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana - Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: inergize-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=kibana.inergize.local
      - SERVER_BASEPATH=/kibana
    volumes:
      - kibana_data:/usr/share/kibana/data
      - ./kibana/config:/usr/share/kibana/config:ro
    networks:
      - elk
      - monitoring
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Filebeat - Log Shipping
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: inergize-filebeat
    restart: unless-stopped
    user: root
    volumes:
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/log:/var/log:ro
    environment:
      - output.elasticsearch.hosts=["elasticsearch:9200"]
    networks:
      - elk
      - monitoring
    depends_on:
      - elasticsearch
      - logstash
    command: ["--strict.perms=false"]

  # Metricbeat - System Metrics for ELK
  metricbeat:
    image: docker.elastic.co/beats/metricbeat:8.11.0
    container_name: inergize-metricbeat
    restart: unless-stopped
    user: root
    volumes:
      - ./metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /proc:/hostfs/proc:ro
      - /:/hostfs:ro
    environment:
      - output.elasticsearch.hosts=["elasticsearch:9200"]
    networks:
      - elk
      - monitoring
    depends_on:
      - elasticsearch
    command: ["--strict.perms=false", "-system.hostfs=/hostfs"]

  # Redis Exporter - Redis Metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: inergize-redis-exporter
    restart: unless-stopped
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - monitoring
    depends_on:
      - redis

  # PostgreSQL Exporter - Database Metrics
  postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:latest
    container_name: inergize-postgres-exporter
    restart: unless-stopped
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
    networks:
      - monitoring
    depends_on:
      - postgres

  # Nginx Exporter - Web Server Metrics
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: inergize-nginx-exporter
    restart: unless-stopped
    ports:
      - "9113:9113"
    command:
      - -nginx.scrape-uri=http://nginx:8080/nginx_status
    networks:
      - monitoring
    depends_on:
      - nginx

  # Blackbox Exporter - Endpoint Monitoring
  blackbox-exporter:
    image: prom/blackbox-exporter:latest
    container_name: inergize-blackbox-exporter
    restart: unless-stopped
    ports:
      - "9115:9115"
    volumes:
      - ./blackbox.yml:/etc/blackbox_exporter/config.yml:ro
    networks:
      - monitoring
    command:
      - '--config.file=/etc/blackbox_exporter/config.yml'

  # Uptime Kuma - Status Page
  uptime-kuma:
    image: louislam/uptime-kuma:latest
    container_name: inergize-uptime-kuma
    restart: unless-stopped
    ports:
      - "3002:3001"
    volumes:
      - ./uptime-kuma:/app/data
    networks:
      - monitoring
    environment:
      - UPTIME_KUMA_DISABLE_FRAME_SAMEORIGIN=true

  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: inergize-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"    # UI
      - "14268:14268"    # HTTP collector
      - "14250:14250"    # gRPC collector
      - "6831:6831/udp"  # Agent UDP
      - "6832:6832/udp"  # Agent UDP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=memory
    networks:
      - monitoring

  # Application Performance Monitoring (APM) Server
  apm-server:
    image: docker.elastic.co/apm/apm-server:8.11.0
    container_name: inergize-apm-server
    restart: unless-stopped
    ports:
      - "8200:8200"
    volumes:
      - ./apm-server.yml:/usr/share/apm-server/apm-server.yml:ro
    environment:
      - output.elasticsearch.hosts=["elasticsearch:9200"]
    networks:
      - elk
      - monitoring
    depends_on:
      - elasticsearch
    command: >
      apm-server -e
        -E apm-server.rum.enabled=true
        -E apm-server.host="0.0.0.0:8200"
        -E apm-server.rum.allow_origins=["*"]
        -E apm-server.kibana.enabled=true
        -E apm-server.kibana.host="kibana:5601"
        -E output.elasticsearch.hosts=["elasticsearch:9200"]

# Health check service for monitoring stack
  monitoring-health:
    image: alpine:latest
    container_name: inergize-monitoring-health
    restart: unless-stopped
    command: >
      sh -c "
        apk add --no-cache curl &&
        while true; do
          echo 'Checking monitoring stack health...' &&
          curl -f http://prometheus:9090/-/healthy || echo 'Prometheus unhealthy' &&
          curl -f http://grafana:3000/api/health || echo 'Grafana unhealthy' &&
          curl -f http://elasticsearch:9200/_cluster/health || echo 'Elasticsearch unhealthy' &&
          curl -f http://kibana:5601/api/status || echo 'Kibana unhealthy' &&
          sleep 300
        done
      "
    networks:
      - monitoring
      - elk
    depends_on:
      - prometheus
      - grafana
      - elasticsearch
      - kibana