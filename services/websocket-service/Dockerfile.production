# Multi-stage Dockerfile for WebSocket Service - Production Optimized
# Optimized for 5,000+ concurrent WebSocket connections

# Build stage
FROM node:20-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./

# Install dependencies including dev dependencies for build
RUN npm ci --include=dev

# Copy source code
COPY src/ ./src/

# Build the application
RUN npm run build

# Remove dev dependencies
RUN npm prune --production

# Production stage
FROM node:20-alpine AS production

# Install security updates and required tools
RUN apk update && apk upgrade && \
    apk add --no-cache curl dumb-init && \
    rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S websocket -u 1001

# Set working directory
WORKDIR /app

# Copy built application and node_modules from builder
COPY --from=builder --chown=websocket:nodejs /app/dist ./dist
COPY --from=builder --chown=websocket:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=websocket:nodejs /app/package*.json ./

# Create logs directory
RUN mkdir -p /app/logs && chown -R websocket:nodejs /app/logs

# Switch to non-root user
USER websocket

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3007/health || exit 1

# Expose port
EXPOSE 3007

# Set environment variables for production
ENV NODE_ENV=production
ENV UV_THREADPOOL_SIZE=128
ENV NODE_OPTIONS="--max-old-space-size=1024"

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "dist/index.js"]