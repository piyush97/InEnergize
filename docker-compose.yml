services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: inergize-postgres
    environment:
      POSTGRES_DB: inergize_dev
      POSTGRES_USER: inergize_user
      POSTGRES_PASSWORD: inergize_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - inergize-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inergize_user -d inergize_dev"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # TimescaleDB for analytics
  timescale:
    image: timescale/timescaledb:latest-pg14
    container_name: inergize-timescale
    environment:
      POSTGRES_DB: inergize_analytics
      POSTGRES_USER: inergize_user
      POSTGRES_PASSWORD: inergize_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - timescale_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - inergize-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inergize_user -d inergize_analytics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: inergize-redis
    command: redis-server --appendonly yes --requirepass inergize_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - inergize-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Elasticsearch for search and logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: inergize-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - inergize-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: inergize-kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - inergize-network
    depends_on:
      - elasticsearch
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # API Gateway (Kong)
  kong:
    image: kong:latest
    container_name: inergize-kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    volumes:
      - ./infrastructure/kong/kong.yml:/kong/declarative/kong.yml:ro
    ports:
      - "8000:8000"   # Kong proxy
      - "8443:8443"   # Kong proxy SSL
      - "8001:8001"   # Kong admin API
      - "8444:8444"   # Kong admin API SSL
    networks:
      - inergize-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Auth Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: inergize-auth-service
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://inergize_user:inergize_password@postgres:5432/inergize_dev
      - REDIS_URL=redis://:inergize_redis_password@redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
    ports:
      - "3001:3001"
    networks:
      - inergize-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # User Management Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: inergize-user-service
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DATABASE_URL=postgresql://inergize_user:inergize_password@postgres:5432/inergize_dev
      - REDIS_URL=redis://:inergize_redis_password@redis:6379
    ports:
      - "3002:3002"
    networks:
      - inergize-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Web Application
  web-app:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: inergize-web-app
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXTAUTH_SECRET=your-nextauth-secret-change-in-production
      - NEXTAUTH_URL=http://localhost:3000
    ports:
      - "3000:3000"
    networks:
      - inergize-network
    depends_on:
      - kong
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
    driver: local
  timescale_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  inergize-network:
    driver: bridge
    name: inergize-network