services:
  # PostgreSQL Database
  postgres:
    image: postgres:latest
    container_name: inergize-postgres
    environment:
      POSTGRES_DB: inergize_dev
      POSTGRES_USER: inergize_user
      POSTGRES_PASSWORD: inergize_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - inergize-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inergize_user -d inergize_dev"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # TimescaleDB for analytics with optimizations
  timescale:
    image: timescale/timescaledb:latest-pg14
    container_name: inergize-timescale
    environment:
      POSTGRES_DB: inergize_analytics
      POSTGRES_USER: inergize_user
      POSTGRES_PASSWORD: inergize_password
      PGDATA: /var/lib/postgresql/data/pgdata
      # TimescaleDB optimizations
      POSTGRES_SHARED_PRELOAD_LIBRARIES: timescaledb
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_MAINTENANCE_WORK_MEM: 64MB
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: 0.9
      POSTGRES_WAL_BUFFERS: 16MB
      POSTGRES_DEFAULT_STATISTICS_TARGET: 100
      POSTGRES_RANDOM_PAGE_COST: 1.1
      POSTGRES_EFFECTIVE_IO_CONCURRENCY: 200
      # TimescaleDB specific settings
      TIMESCALEDB_TELEMETRY: off
      TIMESCALEDB_MAX_BACKGROUND_WORKERS: 8
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./services/analytics-service/src/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    networks:
      - inergize-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inergize_user -d inergize_analytics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Redis Cache
  redis:
    image: redis:latest
    container_name: inergize-redis
    command: redis-server --appendonly yes --requirepass inergize_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - inergize-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Elasticsearch for search and logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.18.4
    container_name: inergize-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - inergize-network
    restart: unless-stopped
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.18.4
    container_name: inergize-kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - inergize-network
    depends_on:
      - elasticsearch
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # API Gateway (Kong)
  kong:
    image: kong:latest
    container_name: inergize-kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.test.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    volumes:
      - ./infrastructure/kong/kong.test.yml:/kong/declarative/kong.test.yml:ro
    ports:
      - "8000:8000" # Kong proxy
      - "8443:8443" # Kong proxy SSL
      - "8001:8001" # Kong admin API
      - "8444:8444" # Kong admin API SSL
    networks:
      - inergize-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Auth Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: inergize-auth-service
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://inergize_user:inergize_password@postgres:5432/inergize_dev
      - REDIS_URL=redis://:inergize_redis_password@redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
    ports:
      - "3001:3001"
    networks:
      - inergize-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3001/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # User Management Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: inergize-user-service
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DATABASE_URL=postgresql://inergize_user:inergize_password@postgres:5432/inergize_dev
      - REDIS_URL=redis://:inergize_redis_password@redis:6379
    ports:
      - "3002:3002"
    networks:
      - inergize-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3002/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # LinkedIn Integration Service
  linkedin-service:
    build:
      context: ./services/linkedin-service
      dockerfile: Dockerfile
    container_name: inergize-linkedin-service
    environment:
      - NODE_ENV=development
      - PORT=3003
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=inergize_redis_password
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - AUTH_SERVICE_URL=http://auth-service:3001
      - USER_SERVICE_URL=http://user-service:3002
      - LINKEDIN_CLIENT_ID=${LINKEDIN_CLIENT_ID:-your_linkedin_client_id}
      - LINKEDIN_CLIENT_SECRET=${LINKEDIN_CLIENT_SECRET:-your_linkedin_client_secret}
      - LINKEDIN_REDIRECT_URI=${LINKEDIN_REDIRECT_URI:-http://localhost:3000/auth/linkedin/callback}
    ports:
      - "3003:3003"
    networks:
      - inergize-network
    depends_on:
      - postgres
      - redis
      - auth-service
      - user-service
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3003/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # WebSocket Service for Real-time Updates (Phase 3)
  websocket-service:
    build:
      context: ./services/websocket-service
      dockerfile: Dockerfile
    container_name: inergize-websocket-service
    environment:
      - NODE_ENV=development
      - PORT=3007
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=inergize_redis_password
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - LOG_LEVEL=info
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=1000
      - WS_PING_TIMEOUT=60000
      - WS_PING_INTERVAL=25000
      - WS_MAX_HTTP_BUFFER_SIZE=1000000
      - ENABLE_METRICS=true
    ports:
      - "3007:3007"
    networks:
      - inergize-network
    depends_on:
      - redis
      - auth-service
      - linkedin-service
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3007/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Enhanced Analytics Service with TimescaleDB
  analytics-service:
    build:
      context: ./services/analytics-service
      dockerfile: Dockerfile
    container_name: inergize-analytics-service
    environment:
      - NODE_ENV=production
      - PORT=3004
      # TimescaleDB connection
      - TIMESCALE_HOST=timescale
      - TIMESCALE_PORT=5432
      - TIMESCALE_USER=inergize_user
      - TIMESCALE_PASSWORD=inergize_password
      - TIMESCALE_DATABASE=inergize_analytics
      - TIMESCALE_MAX_CONNECTIONS=20
      - TIMESCALE_CONNECTION_TIMEOUT=60000
      # Redis configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=inergize_redis_password
      - REDIS_DB=1
      - REDIS_KEY_PREFIX=analytics
      # Authentication
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_EXPIRES_IN=1h
      # WebSocket configuration
      - WS_ENABLED=true
      - WS_PORT=3007
      - WS_HEARTBEAT_INTERVAL=30000
      # Rate limiting
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      # Logging
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      # Metrics collection
      - METRICS_ENABLED=true
      - METRICS_PORT=9090
      - METRICS_PATH=/metrics
      # Data retention
      - DATA_RETENTION_DAYS=90
      - AGGREGATION_INTERVAL_MINUTES=5
      - CLEANUP_INTERVAL_HOURS=24
      # External services
      - AUTH_SERVICE_URL=http://auth-service:3001
      - USER_SERVICE_URL=http://user-service:3002
      - LINKEDIN_SERVICE_URL=http://linkedin-service:3003
    ports:
      - "3004:3004"
      - "3007:3007" # WebSocket port
      - "9090:9090" # Prometheus metrics
    networks:
      - inergize-network
    depends_on:
      timescale:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3004/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # AI Service
  ai-service:
    build:
      context: ./services/ai-service
      dockerfile: Dockerfile
    container_name: inergize-ai-service
    environment:
      - NODE_ENV=production
      - PORT=3005
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=inergize_redis_password
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - AUTH_SERVICE_URL=http://auth-service:3001
      - USER_SERVICE_URL=http://user-service:3002
      - LINKEDIN_SERVICE_URL=http://linkedin-service:3003
      - OPENAI_API_KEY=${OPENAI_API_KEY:-your_openai_api_key}
      - OPENAI_MODEL=gpt-4
      - OPENAI_MAX_TOKENS=4000
      - OPENAI_TEMPERATURE=0.7
      - RATE_LIMIT_PER_MINUTE=10
      - RATE_LIMIT_PER_HOUR=100
      - RATE_LIMIT_PER_DAY=500
      - VALIDATE_TOKENS_WITH_AUTH_SERVICE=true
    ports:
      - "3005:3005"
    networks:
      - inergize-network
    depends_on:
      - redis
      - auth-service
      - user-service
      - linkedin-service
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3005/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Web Application
  web-app:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: inergize-web-app
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXTAUTH_SECRET=your-nextauth-secret-change-in-production
      - NEXTAUTH_URL=http://localhost:3000
    ports:
      - "3000:3000"
    networks:
      - inergize-network
    depends_on:
      - kong
      - linkedin-service
      - analytics-service
      - ai-service
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
    driver: local
  timescale_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  inergize-network:
    driver: bridge
    name: inergize-network
