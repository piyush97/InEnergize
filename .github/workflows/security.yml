# InErgize Security Workflow
# Automated security scanning and compliance checks

name: Security

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '22'

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run setup:services
          npm run setup:web

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate --production
          
          # Audit each service
          cd services/auth-service && npm audit --audit-level=moderate --production
          cd ../user-service && npm audit --audit-level=moderate --production
          cd ../../web && npm audit --audit-level=moderate --production
        continue-on-error: true

      - name: Generate audit report
        run: |
          npm audit --json --production > audit-report.json
          npm audit --audit-level=moderate --production > audit-summary.txt
        continue-on-error: true

      - name: Upload audit reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-audit-reports
          path: |
            audit-report.json
            audit-summary.txt

  # Static code analysis
  code-analysis:
    name: Code Analysis
    runs-on: ubuntu-latest
    
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,typescript
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

      - name: Run ESLint security plugin
        run: |
          npm ci
          npx eslint . --ext .js,.ts,.tsx --format=sarif --output-file=eslint-results.sarif
        continue-on-error: true

      - name: Upload ESLint results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: eslint-results.sarif

  # Container image scanning
  container-scan:
    name: Container Scan
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [auth-service, user-service, web]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.service == 'web' && 'web/Dockerfile' || format('services/{0}/Dockerfile', matrix.service) }}
          tags: ${{ matrix.service }}:scan
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.service }}:scan
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.service }}.sarif'

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        id: grype-scan
        with:
          image: ${{ matrix.service }}:scan
          fail-build: false
          severity-cutoff: medium

      - name: Upload Grype scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ steps.grype-scan.outputs.sarif }}

  # Infrastructure security scanning
  infrastructure-scan:
    name: Infrastructure Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,github_actions,secrets
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif

      - name: Scan Docker Compose files
        run: |
          # Install docker-compose-security-scanner
          pip install docker-compose-security-scanner
          
          # Scan docker-compose files
          docker-compose-security-scanner --file docker-compose.yml --output compose-security.json
          docker-compose-security-scanner --file docker-compose.prod.yml --output compose-prod-security.json
        continue-on-error: true

      - name: Upload Docker Compose scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docker-compose-security-scans
          path: |
            compose-security.json
            compose-prod-security.json

  # Secrets scanning
  secrets-scan:
    name: Secrets Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Scan for API keys and secrets
        run: |
          # Install detect-secrets
          pip install detect-secrets
          
          # Scan for secrets
          detect-secrets scan --all-files --baseline .secrets.baseline
          
          # Audit detected secrets
          detect-secrets audit .secrets.baseline
        continue-on-error: true

  # License compliance scanning
  license-scan:
    name: License Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run setup:services
          npm run setup:web

      - name: Run license checker
        run: |
          # Install license checker
          npm install -g license-checker
          
          # Check licenses
          license-checker --json --out licenses.json
          license-checker --summary --out license-summary.txt
          
          # Check for prohibited licenses
          license-checker --excludePackages "test@1.0.0" --failOn "GPL;AGPL;LGPL;WTFPL"

      - name: Upload license reports
        uses: actions/upload-artifact@v4
        with:
          name: license-reports
          path: |
            licenses.json
            license-summary.txt

  # Security configuration analysis
  security-config:
    name: Security Config Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Analyze security configurations
        run: |
          # Check for security headers
          echo "Checking security configurations..."
          
          # Check for HTTPS enforcement
          if grep -r "http://" . --include="*.js" --include="*.ts" --exclude-dir=node_modules; then
            echo "Warning: Found HTTP URLs in code"
          fi
          
          # Check for hardcoded secrets patterns
          if grep -r -E "(password|secret|key|token).*=.*['\"][^'\"]{8,}['\"]" . --include="*.js" --include="*.ts" --exclude-dir=node_modules; then
            echo "Warning: Potential hardcoded secrets found"
          fi
          
          # Check for weak crypto usage
          if grep -r -E "(md5|sha1)" . --include="*.js" --include="*.ts" --exclude-dir=node_modules; then
            echo "Warning: Weak cryptographic functions found"
          fi
          
          # Check for SQL injection patterns
          if grep -r -E "query.*\+.*req\." . --include="*.js" --include="*.ts" --exclude-dir=node_modules; then
            echo "Warning: Potential SQL injection patterns found"
          fi

      - name: Check environment security
        run: |
          # Check for .env files with secrets
          if find . -name ".env*" -not -path "./node_modules/*" -exec grep -l "password\|secret\|key" {} \; | head -5; then
            echo "Warning: Environment files contain sensitive data"
          fi
          
          # Check for exposed configuration
          if find . -name "config*.json" -not -path "./node_modules/*" -exec grep -l "password\|secret\|key" {} \; | head -5; then
            echo "Warning: Configuration files contain sensitive data"
          fi

  # Dependency license and security analysis
  dependency-analysis:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Generate SBOM
        run: |
          # Install CycloneDX
          npm install -g @cyclonedx/cyclonedx-npm
          
          # Generate Software Bill of Materials
          cyclonedx-npm --output-file sbom.json --output-format json
          cyclonedx-npm --output-file sbom.xml --output-format xml

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: software-bill-of-materials
          path: |
            sbom.json
            sbom.xml

      - name: Analyze dependencies with OSV Scanner
        uses: google/osv-scanner-action@v1
        with:
          scan-args: |-
            -r
            --format=sarif
            --output=osv-results.sarif
            ./

      - name: Upload OSV scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: osv-results.sarif

  # Security summary and reporting
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-analysis, container-scan, infrastructure-scan, secrets-scan, license-scan]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate security report
        run: |
          echo "# InErgize Security Report" > security-report.md
          echo "Generated on: $(date)" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Scan Results Summary" >> security-report.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
          echo "- Code Analysis: ${{ needs.code-analysis.result }}" >> security-report.md
          echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-report.md
          echo "- Infrastructure Scan: ${{ needs.infrastructure-scan.result }}" >> security-report.md
          echo "- Secrets Scan: ${{ needs.secrets-scan.result }}" >> security-report.md
          echo "- License Scan: ${{ needs.license-scan.result }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Recommendations" >> security-report.md
          echo "1. Review all identified vulnerabilities" >> security-report.md
          echo "2. Update dependencies with known vulnerabilities" >> security-report.md
          echo "3. Address any hardcoded secrets or credentials" >> security-report.md
          echo "4. Ensure proper security headers are configured" >> security-report.md
          echo "5. Validate license compliance for all dependencies" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md

      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔒 Security Scan Results\n\n${report}`
            });

      - name: Fail if critical vulnerabilities found
        run: |
          # Check for any critical vulnerabilities and fail the workflow
          if grep -r "CRITICAL\|HIGH" . --include="*.sarif" --include="*.json" 2>/dev/null; then
            echo "❌ Critical or high severity vulnerabilities found!"
            echo "Please review the security scan results and address critical issues."
            exit 1
          else
            echo "✅ No critical vulnerabilities found."
          fi