# InErgize CI/CD Pipeline
# Comprehensive continuous integration and deployment workflow

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, 'feature/*', 'hotfix/*']
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  NODE_VERSION: '22'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Preparation and validation
  prepare:
    name: Prepare Environment
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.deploy_check.outputs.should_deploy }}
      environment: ${{ steps.deploy_check.outputs.environment }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Get version
        id: version
        run: |
          if [[ ${{ github.event_name }} == 'release' ]]; then
            echo "version=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
          fi

      - name: Determine deployment
        id: deploy_check
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "environment=development" >> $GITHUB_OUTPUT
          fi

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            */node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

  # Code quality and linting
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run setup:services
          npm run setup:web

      - name: Run ESLint
        run: npm run lint
        continue-on-error: true

      - name: Run Prettier check
        run: npm run format:check
        continue-on-error: true

      - name: Run TypeScript check
        run: npm run type-check

      - name: Security audit
        run: npm run security:audit
        continue-on-error: true

      - name: Upload lint results
        uses: github/super-linter@v5
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_TYPESCRIPT_ES: true
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_JSON: true
          VALIDATE_MARKDOWN: true
        continue-on-error: true

  # Unit and integration tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: prepare
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: inergize_user
          POSTGRES_PASSWORD: inergize_password
          POSTGRES_DB: inergize_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run setup:services
          npm run setup:web

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://inergize_user:inergize_password@localhost:5432/inergize_test
        run: |
          cd database
          npx prisma migrate deploy
          npx prisma generate

      - name: Run unit tests
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://inergize_user:inergize_password@localhost:5432/inergize_test
          REDIS_URL: redis://localhost:6379/1
        run: npm run test:unit

      - name: Run integration tests
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://inergize_user:inergize_password@localhost:5432/inergize_test
          REDIS_URL: redis://localhost:6379/1
        run: npm run test:integration

      - name: Generate test coverage
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://inergize_user:inergize_password@localhost:5432/inergize_test
          REDIS_URL: redis://localhost:6379/1
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            test-results.xml

  # End-to-end tests
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: prepare
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run setup:services
          npm run setup:web

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Start services for E2E tests
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Wait for services
        run: |
          npx wait-on http://localhost:3000 http://localhost:3001 http://localhost:3002 -t 60000

      - name: Run E2E tests
        env:
          NODE_ENV: test
        run: npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results
          path: |
            test-results/
            playwright-report/

      - name: Stop services
        if: always()
        run: docker-compose -f docker-compose.test.yml down

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate --production
        continue-on-error: true

      - name: CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript,typescript

  # Build Docker images
  build:
    name: Build Images
    runs-on: ubuntu-latest
    needs: [prepare, lint, test]
    if: success()
    
    strategy:
      matrix:
        service: [auth-service, user-service, web]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.service == 'web' && 'web/Dockerfile' || format('services/{0}/Dockerfile', matrix.service) }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.prepare.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            COMMIT_SHA=${{ github.sha }}

  # Deploy to staging/production
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [prepare, lint, test, e2e, security, build]
    if: needs.prepare.outputs.should_deploy == 'true'
    
    environment:
      name: ${{ needs.prepare.outputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to ECS
        id: deploy
        env:
          ENVIRONMENT: ${{ needs.prepare.outputs.environment }}
          VERSION: ${{ needs.prepare.outputs.version }}
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster inergize-${{ env.ENVIRONMENT }} \
            --service inergize-web-${{ env.ENVIRONMENT }} \
            --force-new-deployment
          
          # Wait for deployment to complete
          aws ecs wait services-stable \
            --cluster inergize-${{ env.ENVIRONMENT }} \
            --services inergize-web-${{ env.ENVIRONMENT }}
          
          # Get service URL
          if [[ "${{ env.ENVIRONMENT }}" == "production" ]]; then
            echo "url=https://app.inergize.com" >> $GITHUB_OUTPUT
          else
            echo "url=https://staging.inergize.com" >> $GITHUB_OUTPUT
          fi

      - name: Run deployment tests
        env:
          DEPLOYMENT_URL: ${{ steps.deploy.outputs.url }}
        run: |
          # Health check
          curl -f ${{ env.DEPLOYMENT_URL }}/api/health || exit 1
          
          # Basic functionality test
          curl -f ${{ env.DEPLOYMENT_URL }}/api/status || exit 1

      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            🚀 Deployment successful!
            Environment: ${{ needs.prepare.outputs.environment }}
            Version: ${{ needs.prepare.outputs.version }}
            URL: ${{ steps.deploy.outputs.url }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ❌ Deployment failed!
            Environment: ${{ needs.prepare.outputs.environment }}
            Version: ${{ needs.prepare.outputs.version }}
            Check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Performance testing (staging only)
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [prepare, deploy]
    if: needs.prepare.outputs.environment == 'staging'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        env:
          TARGET_URL: https://staging.inergize.com
        run: |
          k6 run tests/performance/load-test.js \
            --env TARGET_URL=${{ env.TARGET_URL }} \
            --out json=performance-results.json

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: performance-results.json

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy, performance]
    if: always()
    
    steps:
      - name: Clean up old images
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Keep only the latest 10 images per service
          for service in auth-service user-service web; do
            gh api \
              --method GET \
              -H "Accept: application/vnd.github+json" \
              "/orgs/${{ github.repository_owner }}/packages/container/${{ github.repository }}%2F${service}/versions" \
              --jq '.[] | select(.metadata.container.tags | length == 0) | .id' \
              | head -n -10 \
              | xargs -I {} gh api \
                --method DELETE \
                -H "Accept: application/vnd.github+json" \
                "/orgs/${{ github.repository_owner }}/packages/container/${{ github.repository }}%2F${service}/versions/{}"
          done