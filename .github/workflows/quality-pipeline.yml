# InErgize Quality Pipeline - Comprehensive Testing Workflow
# 
# Automated quality gates with 95% test coverage target
# AI model validation, LinkedIn compliance, and performance benchmarking

name: Quality Pipeline

on:
  push:
    branches: [ main, develop, 'dev/*', 'feature/*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run comprehensive tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '14'
  REDIS_VERSION: '7'

jobs:
  # Phase 1: Static Analysis & Code Quality
  static-analysis:
    name: Static Analysis & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript compilation check
        run: npx tsc --noEmit --project tsconfig.json

      - name: ESLint analysis
        run: npx eslint . --ext .ts,.tsx --format json --output-file eslint-report.json
        continue-on-error: true

      - name: Prettier formatting check
        run: npx prettier --check .

      - name: Code complexity analysis
        run: npx complexity-report --format json --output complexity-report.json
        continue-on-error: true

      - name: Upload static analysis artifacts
        uses: actions/upload-artifact@v4
        with:
          name: static-analysis-reports
          path: |
            eslint-report.json
            complexity-report.json

  # Phase 2: Unit Tests with Coverage
  unit-tests:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: static-analysis
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:unit -- --coverage --json --outputFile=unit-test-results.json
        env:
          NODE_ENV: test

      - name: Check coverage thresholds
        run: |
          COVERAGE=$(node -p "Math.round(JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json')).total.lines.pct)")
          echo "Coverage: ${COVERAGE}%"
          if [ $COVERAGE -lt 80 ]; then
            echo "❌ Coverage below 80% threshold: ${COVERAGE}%"
            exit 1
          else
            echo "✅ Coverage meets 80% threshold: ${COVERAGE}%"
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: unit-tests

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-reports
          path: |
            unit-test-results.json
            coverage/

  # Phase 3: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: unit-tests

    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: inergize_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: inergize_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:${{ env.REDIS_VERSION }}-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          npm run db:migrate
          npm run db:seed:test
        env:
          DATABASE_URL: postgresql://inergize_test:test_password@localhost:5432/inergize_test
          REDIS_URL: redis://localhost:6379

      - name: Run integration tests
        run: npm run test:integration -- --json --outputFile=integration-test-results.json
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://inergize_test:test_password@localhost:5432/inergize_test
          REDIS_URL: redis://localhost:6379

      - name: Upload integration test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-reports
          path: integration-test-results.json

  # Phase 4: AI Model Validation
  ai-model-validation:
    name: AI Model Validation & Bias Testing
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: integration-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run AI model accuracy tests
        run: npm test -- tests/ai-models/model-accuracy.test.ts --json --outputFile=ai-accuracy-results.json
        env:
          NODE_ENV: test
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY_TEST }}

      - name: Run bias detection tests
        run: npm test -- tests/ai-models/bias-detection.test.ts --json --outputFile=ai-bias-results.json
        env:
          NODE_ENV: test
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}

      - name: Validate AI performance thresholds
        run: |
          node -e "
          const accuracy = JSON.parse(require('fs').readFileSync('ai-accuracy-results.json'));
          const bias = JSON.parse(require('fs').readFileSync('ai-bias-results.json'));
          
          const accuracyRate = accuracy.numPassedTests / accuracy.numTotalTests;
          const biasRate = bias.numPassedTests / bias.numTotalTests;
          
          console.log('AI Accuracy Rate:', (accuracyRate * 100).toFixed(1) + '%');
          console.log('Bias Fairness Rate:', (biasRate * 100).toFixed(1) + '%');
          
          if (accuracyRate < 0.85) {
            console.error('❌ AI accuracy below 85% threshold');
            process.exit(1);
          }
          
          if (biasRate < 0.90) {
            console.error('❌ Bias fairness below 90% threshold');
            process.exit(1);
          }
          
          console.log('✅ AI validation passed all thresholds');
          "

      - name: Upload AI validation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ai-validation-reports
          path: |
            ai-accuracy-results.json
            ai-bias-results.json

  # Phase 5: LinkedIn Compliance Testing
  linkedin-compliance:
    name: LinkedIn Compliance & Safety
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: ai-model-validation

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run LinkedIn compliance tests
        run: npm test -- tests/compliance/linkedin-api-compliance.test.ts --json --outputFile=compliance-results.json
        env:
          NODE_ENV: test

      - name: Validate compliance thresholds
        run: |
          node -e "
          const results = JSON.parse(require('fs').readFileSync('compliance-results.json'));
          const complianceRate = results.numPassedTests / results.numTotalTests;
          
          console.log('Compliance Rate:', (complianceRate * 100).toFixed(1) + '%');
          
          if (complianceRate < 0.95) {
            console.error('❌ LinkedIn compliance below 95% threshold');
            process.exit(1);
          }
          
          console.log('✅ LinkedIn compliance passed 95% threshold');
          "

      - name: Upload compliance artifacts
        uses: actions/upload-artifact@v4
        with:
          name: compliance-reports
          path: compliance-results.json

  # Phase 6: Performance & Load Testing
  performance-tests:
    name: Performance & Load Testing
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: linkedin-compliance

    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: inergize_perf
          POSTGRES_PASSWORD: perf_password
          POSTGRES_DB: inergize_perf
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:${{ env.REDIS_VERSION }}-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run AI model performance tests
        run: npm test -- tests/performance/ai-model-performance.test.ts --json --outputFile=ai-perf-results.json
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://inergize_perf:perf_password@localhost:5432/inergize_perf
          REDIS_URL: redis://localhost:6379

      - name: Run team collaboration load tests
        run: npm test -- tests/performance/team-collaboration-load.test.ts --json --outputFile=load-test-results.json
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://inergize_perf:perf_password@localhost:5432/inergize_perf
          REDIS_URL: redis://localhost:6379

      - name: Validate performance thresholds
        run: |
          node -e "
          const aiPerf = JSON.parse(require('fs').readFileSync('ai-perf-results.json'));
          const loadTest = JSON.parse(require('fs').readFileSync('load-test-results.json'));
          
          const aiPerfRate = aiPerf.numPassedTests / aiPerf.numTotalTests;
          const loadTestRate = loadTest.numPassedTests / loadTest.numTotalTests;
          const overallPerfScore = (aiPerfRate + loadTestRate) / 2 * 100;
          
          console.log('AI Performance Rate:', (aiPerfRate * 100).toFixed(1) + '%');
          console.log('Load Test Rate:', (loadTestRate * 100).toFixed(1) + '%');
          console.log('Overall Performance Score:', overallPerfScore.toFixed(1) + '%');
          
          if (overallPerfScore < 85) {
            console.error('❌ Performance score below 85% threshold');
            process.exit(1);
          }
          
          console.log('✅ Performance tests passed 85% threshold');
          "

      - name: Upload performance artifacts
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: |
            ai-perf-results.json
            load-test-results.json

  # Phase 7: Security Testing
  security-tests:
    name: Security & Vulnerability Assessment
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: performance-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --json > audit-results.json || true

      - name: Run security-focused tests
        run: npm test -- --testNamePattern="security|auth|permission" --json --outputFile=security-test-results.json
        env:
          NODE_ENV: test

      - name: Validate security thresholds
        run: |
          node -e "
          const audit = JSON.parse(require('fs').readFileSync('audit-results.json'));
          const tests = JSON.parse(require('fs').readFileSync('security-test-results.json'));
          
          const criticalVulns = audit.metadata?.vulnerabilities?.critical || 0;
          const highVulns = audit.metadata?.vulnerabilities?.high || 0;
          const testPassRate = tests.numPassedTests / tests.numTotalTests;
          
          console.log('Critical Vulnerabilities:', criticalVulns);
          console.log('High Vulnerabilities:', highVulns);
          console.log('Security Test Pass Rate:', (testPassRate * 100).toFixed(1) + '%');
          
          if (criticalVulns > 0) {
            console.error('❌ Critical vulnerabilities found:', criticalVulns);
            process.exit(1);
          }
          
          if (testPassRate < 0.95) {
            console.error('❌ Security test pass rate below 95%');
            process.exit(1);
          }
          
          console.log('✅ Security validation passed all checks');
          "

      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            audit-results.json
            security-test-results.json

  # Phase 8: End-to-End Testing
  e2e-tests:
    name: End-to-End Testing
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: security-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Start application services
        run: |
          docker-compose up -d postgres redis
          sleep 10
          npm run build
          npm run start:test &
          sleep 30
        env:
          NODE_ENV: test

      - name: Run Playwright E2E tests
        run: npx playwright test --reporter=html,json
        env:
          NODE_ENV: test
          BASE_URL: http://localhost:3000

      - name: Upload E2E test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-reports
          path: |
            playwright-report/
            test-results/

  # Phase 9: Quality Gate Evaluation
  quality-gate:
    name: Quality Gate Evaluation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [static-analysis, unit-tests, integration-tests, ai-model-validation, linkedin-compliance, performance-tests, security-tests, e2e-tests]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: test-artifacts/

      - name: Run quality gate evaluation
        run: |
          node -e "
          const fs = require('fs');
          const path = require('path');
          
          // Collect all test results
          const results = {};
          const artifactDir = 'test-artifacts';
          
          // Process each test phase
          const phases = [
            'unit-test-reports',
            'integration-test-reports', 
            'ai-validation-reports',
            'compliance-reports',
            'performance-reports',
            'security-reports'
          ];
          
          let totalTests = 0;
          let passedTests = 0;
          let overallScore = 0;
          let phaseCount = 0;
          
          for (const phase of phases) {
            try {
              const phaseDir = path.join(artifactDir, phase);
              if (fs.existsSync(phaseDir)) {
                const files = fs.readdirSync(phaseDir);
                const jsonFiles = files.filter(f => f.endsWith('.json'));
                
                for (const file of jsonFiles) {
                  const content = JSON.parse(fs.readFileSync(path.join(phaseDir, file)));
                  if (content.numTotalTests) {
                    totalTests += content.numTotalTests;
                    passedTests += content.numPassedTests;
                    const phaseScore = (content.numPassedTests / content.numTotalTests) * 100;
                    overallScore += phaseScore;
                    phaseCount++;
                  }
                }
              }
            } catch (error) {
              console.warn('Failed to process phase:', phase, error.message);
            }
          }
          
          const avgScore = phaseCount > 0 ? overallScore / phaseCount : 0;
          const passRate = totalTests > 0 ? (passedTests / totalTests) * 100 : 0;
          
          console.log('=== QUALITY GATE EVALUATION ===');
          console.log('Total Tests:', totalTests);
          console.log('Passed Tests:', passedTests);
          console.log('Pass Rate:', passRate.toFixed(1) + '%');
          console.log('Overall Quality Score:', avgScore.toFixed(1) + '%');
          
          // Determine recommendation
          let recommendation;
          if (avgScore >= 90 && passRate >= 95) {
            recommendation = 'DEPLOY';
            console.log('✅ RECOMMENDATION: DEPLOY');
          } else if (avgScore >= 75 && passRate >= 85) {
            recommendation = 'DEPLOY_WITH_CAUTION';
            console.log('⚠️  RECOMMENDATION: DEPLOY_WITH_CAUTION');
          } else {
            recommendation = 'BLOCK';
            console.log('❌ RECOMMENDATION: BLOCK');
          }
          
          // Generate summary report
          const summary = {
            timestamp: new Date().toISOString(),
            recommendation,
            overallScore: avgScore,
            passRate,
            totalTests,
            passedTests,
            failedTests: totalTests - passedTests
          };
          
          fs.writeFileSync('quality-gate-summary.json', JSON.stringify(summary, null, 2));
          
          // Set GitHub output
          console.log('::set-output name=recommendation::' + recommendation);
          console.log('::set-output name=quality-score::' + avgScore.toFixed(1));
          console.log('::set-output name=pass-rate::' + passRate.toFixed(1));
          
          // Exit with error if blocked
          if (recommendation === 'BLOCK') {
            process.exit(1);
          }
          "

      - name: Upload quality gate summary
        uses: actions/upload-artifact@v4
        with:
          name: quality-gate-summary
          path: quality-gate-summary.json

      - name: Comment PR with quality results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = JSON.parse(fs.readFileSync('quality-gate-summary.json'));
            
            const body = `## 🔍 Quality Gate Results
            
            **Recommendation:** ${summary.recommendation === 'DEPLOY' ? '✅' : summary.recommendation === 'DEPLOY_WITH_CAUTION' ? '⚠️' : '❌'} **${summary.recommendation}**
            
            ### 📊 Quality Metrics
            - **Overall Quality Score:** ${summary.overallScore.toFixed(1)}%
            - **Test Pass Rate:** ${summary.passRate.toFixed(1)}%
            - **Total Tests:** ${summary.totalTests}
            - **Passed Tests:** ${summary.passedTests}
            - **Failed Tests:** ${summary.failedTests}
            
            ### 🎯 Quality Thresholds
            - ✅ Test Coverage: ≥80%
            - ✅ AI Model Accuracy: ≥85%
            - ✅ Bias Fairness: ≥90%
            - ✅ LinkedIn Compliance: ≥95%
            - ✅ Performance Score: ≥85%
            - ✅ Security Score: ≥95%
            
            *Generated at ${summary.timestamp}*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # Deployment job (only on main branch with successful quality gate)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: quality-gate
    if: github.ref == 'refs/heads/main' && needs.quality-gate.outputs.recommendation != 'BLOCK'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging environment
        run: |
          echo "🚀 Deploying to staging with quality score: ${{ needs.quality-gate.outputs.quality-score }}%"
          echo "Recommendation: ${{ needs.quality-gate.outputs.recommendation }}"
          # Add actual deployment steps here